(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{474:function(t,a,s){"use strict";s.r(a);var v=s(42),e=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("本文作为手册，在性能调优时可参考手册进行相应的调优参数配置\n")]),t._v(" "),s("h2",{attrs:{id:"常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出当前运行的Java进程")]),t._v("\n$ jps -l \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出指定Java进程的堆内存信息 （23495代表指定的Java进程ID）")]),t._v("\n$ jmap -heap "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("23495")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 导出堆内存信息 （E:\\output\\jmap.bin代表输出的文件路径，23495代表指定的Java进程ID）")]),t._v("\n$ jmap -dump:format"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("b,file"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("E:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("output"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("jmap.bin "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("23495")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列出指定Java进程中存活的对象信息 （23495代表指定的Java进程ID，head -20 代表显示前20行，Windows中不支持head）")]),t._v("\n$ jmap -histo:live "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("23495")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("head")]),t._v(" -20\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 每隔指定时间输出gc信息 （23495代表指定的Java进程ID， 5000代表每个5s刷新一次输出）")]),t._v("\n$ jstat -gc "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("23495")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5000")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("h2",{attrs:{id:"常用命令详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用命令详解"}},[t._v("#")]),t._v(" 常用命令详解")]),t._v(" "),s("h3",{attrs:{id:"jinfo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jinfo"}},[t._v("#")]),t._v(" jinfo")]),t._v(" "),s("p",[t._v("查看正在运行的Java应用程序的扩展参数")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看jvm的参数")]),t._v("\njinfo -flags "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("pid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看java系统参数")]),t._v("\njinfo -sysprops "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("pid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h3",{attrs:{id:"jstat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jstat"}},[t._v("#")]),t._v(" jstat")]),t._v(" "),s("p",[t._v("jstat命令可以查看堆内存各部分的使用量，以及加载类的数量。命令的格式如下：")]),t._v(" "),s("p",[t._v("jstat [-命令选项] [vmid] [间隔时间/毫秒] [查询次数]")]),t._v(" "),s("p",[t._v("注意：使用的jdk版本是jdk8.")]),t._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 类加载统计")]),t._v("\njstat -class "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("pid"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h2",{attrs:{id:"常用收集器组合方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用收集器组合方式"}},[t._v("#")]),t._v(" 常用收集器组合方式")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("组合方式")]),t._v(" "),s("th",[t._v("类型")]),t._v(" "),s("th",[t._v("适用情形")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("Serial + Serial Old")]),t._v(" "),s("td",[t._v("都串行")]),t._v(" "),s("td",[t._v("单CPU（或CPU较少）、小型客户端")])]),t._v(" "),s("tr",[s("td",[t._v("ParNew + Serial Old")]),t._v(" "),s("td",[t._v("新生代并行 + 老年代串行")]),t._v(" "),s("td",[t._v("资源倾向新生代（响应快的web服务）")])]),t._v(" "),s("tr",[s("td",[t._v("Parallel Scavenge + Serial Old")]),t._v(" "),s("td",[t._v("新生代并行（"),s("strong",[t._v("高吞吐")]),t._v("） +  老年代串行")]),t._v(" "),s("td",[t._v("资源倾向新生代（吞吐量高的web服务）")])]),t._v(" "),s("tr",[s("td",[t._v("Parallel Scavenge + Parallel Old")]),t._v(" "),s("td",[t._v("Java8默认，都并行（"),s("strong",[t._v("高吞吐")]),t._v("）")]),t._v(" "),s("td",[t._v("多CPU、"),s("strong",[t._v("吞吐优先")]),t._v("（后台处理、科学计算）")])]),t._v(" "),s("tr",[s("td",[t._v("ParNew + CMS")]),t._v(" "),s("td",[t._v("新生代并行 + 老年代"),s("strong",[t._v("并发")])]),t._v(" "),s("td",[t._v("多CPU、"),s("strong",[t._v("响应优先")]),t._v("（web服务、实时计算）")])]),t._v(" "),s("tr",[s("td",[t._v("G1（ParNew + CMS的增强）")]),t._v(" "),s("td",[s("strong",[t._v("并发")]),t._v(" + 并行")]),t._v(" "),s("td")])])]),t._v(" "),s("h2",{attrs:{id:"堆栈设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆栈设置"}},[t._v("#")]),t._v(" 堆栈设置")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("GC参数")]),t._v(" "),s("th",[t._v("参数含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("-Xss")]),t._v(" "),s("td",[t._v("每个线程的栈大小")])]),t._v(" "),s("tr",[s("td",[t._v("-Xms")]),t._v(" "),s("td",[t._v("初始堆大小，默认物理内存的1/64")])]),t._v(" "),s("tr",[s("td",[t._v("-Xmx")]),t._v(" "),s("td",[t._v("最大堆大小，默认物理内存的1/4")])]),t._v(" "),s("tr",[s("td",[t._v("-Xmn")]),t._v(" "),s("td",[t._v("新生代大小")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:NewSize")]),t._v(" "),s("td",[t._v("设置新生代初始大小")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:NewRatio")]),t._v(" "),s("td",[t._v("默认2表示新生代占年老代的1/2，占整个堆内存的1/3。")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:SurvivorRatio")]),t._v(" "),s("td",[t._v("默认8表示一个survivor区占用1/8的Eden内存，即1/10的新生代内存。")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:MaxMetaspaceSize")]),t._v(" "),s("td",[t._v("设置元空间最大允许大小，默认不受限制，JVM Metaspace会进行动态扩展。")])])])]),t._v(" "),s("h2",{attrs:{id:"垃圾回收统计信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收统计信息"}},[t._v("#")]),t._v(" 垃圾回收统计信息")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("GC参数")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("-XX:+PrintGC")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:+PrintGCDetails")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:+PrintGCTimeStamps")])]),t._v(" "),s("tr",[s("td",[t._v("-Xloggc:filename")])])])]),t._v(" "),s("h2",{attrs:{id:"收集器设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#收集器设置"}},[t._v("#")]),t._v(" 收集器设置")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("GC参数")]),t._v(" "),s("th",[t._v("参数含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("-XX:+UseSerialGC")]),t._v(" "),s("td",[t._v("设置串行收集器")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:+UseParallelGC")]),t._v(" "),s("td",[t._v("设置并行收集器")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:+UseParallelOldGC")]),t._v(" "),s("td",[t._v("老年代使用并行回收收集器")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:+UseParNewGC")]),t._v(" "),s("td",[t._v("在新生代使用并行收集器")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:+UseParalledlOldGC")]),t._v(" "),s("td",[t._v("设置并行老年代收集器")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:+UseConcMarkSweepGC")]),t._v(" "),s("td",[t._v("设置CMS并发收集器")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:+UseG1GC")]),t._v(" "),s("td",[t._v("设置G1收集器")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:ParallelGCThreads")]),t._v(" "),s("td",[t._v("设置用于垃圾回收的线程数")])])])]),t._v(" "),s("h2",{attrs:{id:"并行收集器设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并行收集器设置"}},[t._v("#")]),t._v(" 并行收集器设置")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("GC参数")]),t._v(" "),s("th",[t._v("参数含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("-XX:ParallelGCThreads")]),t._v(" "),s("td",[t._v("设置并行收集器收集时使用的CPU数。并行收集线程数。")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:MaxGCPauseMillis")]),t._v(" "),s("td",[t._v("设置并行收集最大暂停时间")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:GCTimeRatio")]),t._v(" "),s("td",[t._v("设置垃圾回收时间占程序运行时间的百分比。公式为1/(1+n)")])])])]),t._v(" "),s("h2",{attrs:{id:"cms收集器设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cms收集器设置"}},[t._v("#")]),t._v(" CMS收集器设置")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("GC参数")]),t._v(" "),s("th",[t._v("参数含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("-XX:+UseConcMarkSweepGC")]),t._v(" "),s("td",[t._v("设置CMS并发收集器")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:+CMSIncrementalMode")]),t._v(" "),s("td",[t._v("设置为增量模式。适用于单CPU情况。")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:ParallelGCThreads")]),t._v(" "),s("td",[t._v("设置并发收集器新生代收集方式为并行收集时，使用的CPU数。并行收集线程数。")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:CMSFullGCsBeforeCompaction")]),t._v(" "),s("td",[t._v("设定进行多少次CMS垃圾回收后，进行一次内存压缩")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:+CMSClassUnloadingEnabled")]),t._v(" "),s("td",[t._v("允许对类元数据进行回收")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:UseCMSInitiatingOccupancyOnly")]),t._v(" "),s("td",[t._v("表示只在到达阀值的时候，才进行CMS回收")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:+CMSIncrementalMode")]),t._v(" "),s("td",[t._v("设置为增量模式。适用于单CPU情况")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:ParallelCMSThreads")]),t._v(" "),s("td",[t._v("设定CMS的线程数量")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:CMSInitiatingOccupancyFraction")]),t._v(" "),s("td",[t._v("设置CMS收集器在老年代空间被使用多少后触发")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:+UseCMSCompactAtFullCollection")]),t._v(" "),s("td",[t._v("设置CMS收集器在完成垃圾收集后是否要进行一次内存碎片的整理")])])])]),t._v(" "),s("h2",{attrs:{id:"g1收集器设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#g1收集器设置"}},[t._v("#")]),t._v(" G1收集器设置")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("GC参数")]),t._v(" "),s("th",[t._v("参数含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("-XX:+UseG1GC")]),t._v(" "),s("td",[t._v("使用G1收集器")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:ParallelGCThreads")]),t._v(" "),s("td",[t._v("指定GC工作的线程数量")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:G1HeapRegionSize")]),t._v(" "),s("td",[t._v("指定分区大小(1MB~32MB，且必须是2的幂)，默认将整堆划分为2048个分区")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:GCTimeRatio")]),t._v(" "),s("td",[t._v("吞吐量大小，0-100的整数(默认9)，值为n则系统将花费不超过1/(1+n)的时间用于垃圾收集")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:MaxGCPauseMillis")]),t._v(" "),s("td",[t._v("目标暂停时间(默认200ms)")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:G1NewSizePercent")]),t._v(" "),s("td",[t._v("新生代内存初始空间(默认整堆5%)")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:G1MaxNewSizePercent")]),t._v(" "),s("td",[t._v("新生代内存最大空间")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:TargetSurvivorRatio")]),t._v(" "),s("td",[t._v("Survivor填充容量(默认50%)")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:MaxTenuringThreshold")]),t._v(" "),s("td",[t._v("最大任期阈值(默认15)")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:InitiatingHeapOccupancyPercen")]),t._v(" "),s("td",[t._v("老年代占用空间超过整堆比IHOP阈值(默认45%),超过则执行混合收集")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:G1HeapWastePercent")]),t._v(" "),s("td",[t._v("堆废物百分比(默认5%)")])]),t._v(" "),s("tr",[s("td",[t._v("-XX:G1MixedGCCountTarget")]),t._v(" "),s("td",[t._v("参数混合周期的最大总次数(默认8)")])])])]),t._v(" "),s("h2",{attrs:{id:"gc日志分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc日志分析"}},[t._v("#")]),t._v(" GC日志分析")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gallery.sleepyocean.cn/resource/img/c292d1a8aa27d1ed104f8fd9be14184d",alt:"image.png"}})]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[GC [PSYoungGen: 8192K->1000K(9216K)] 16004K->14604K(29696K), 0.0317424 secs] [Times: user=0.06 sys=0.00, real=0.03 secs]\n[GC [PSYoungGen: 9192K->1016K(9216K)] 22796K->20780K(29696K), 0.0314567 secs] [Times: user=0.06 sys=0.00, real=0.03 secs]\n[Full GC [PSYoungGen: 8192K->8192K(9216K)] [ParOldGen: 20435K->20435K(20480K)] 28627K->28627K(29696K), [Metaspace: 8469K->8469K(1056768K)], 0.1307495 secs] [Times: user=0.50 sys=0.00, real=0.13 secs]\n[Full GC [PSYoungGen: 8192K->8192K(9216K)] [ParOldGen: 20437K->20437K(20480K)] 28629K->28629K(29696K), [Metaspace: 8469K->8469K(1056768K)], 0.1240311 secs] [Times: user=0.42 sys=0.00, real=0.12 secs]\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h2",{attrs:{id:"常见异常"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见异常"}},[t._v("#")]),t._v(" 常见异常")]),t._v(" "),s("ul",[s("li",[t._v("StackOverflowError:（栈溢出）")]),t._v(" "),s("li",[t._v("OutOfMemoryError: Java heap space（堆空间不足）")]),t._v(" "),s("li",[t._v("OutOfMemoryError: GC overhead limit exceeded  （GC花费的时间超过 98%, 并且GC回收的内存少于 2%）")])])])}),[],!1,null,null,null);a.default=e.exports}}]);