(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{472:function(e,o,_){"use strict";_.r(o);var v=_(42),r=Object(v.a)({},(function(){var e=this,o=e.$createElement,_=e._self._c||o;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("p",[e._v("ZooKeeper是Hadoop的正式子项目，它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、分布式同步、组服务等。")]),e._v(" "),_("p",[e._v("ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。")]),e._v(" "),_("h2",{attrs:{id:"一、zookeeper简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、zookeeper简介"}},[e._v("#")]),e._v(" 一、Zookeeper简介")]),e._v(" "),_("p",[e._v("Zookeeper是一个开源的分布式协调服务，目前由Apache进行维护。Zookeeper可以用于实现分布式系统中常见的发布/订阅、负载均衡、命令服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。它具有以下特性：")]),e._v(" "),_("ul",[_("li",[_("strong",[e._v("顺序一致性")]),e._v(" ：从一个客户端发起的事务请求，最终都会严格按照其发起顺序被应用到Zookeeper中；")]),e._v(" "),_("li",[_("strong",[e._v("原子性")]),e._v(" ：所有事务请求的处理结果在整个集群中所有机器上都是一致的；不存在部分机器应用了该事务，而另一部分没有应用的情况；")]),e._v(" "),_("li",[_("strong",[e._v("单一视图")]),e._v(" ：所有客户端看到的服务端数据模型都是一致的；")]),e._v(" "),_("li",[_("strong",[e._v("可靠性")]),e._v(" ：一旦服务端成功应用了一个事务，则其引起的改变会一直保留，直到被另外一个事务所更改；")]),e._v(" "),_("li",[_("strong",[e._v("实时性")]),e._v(" ：一旦一个事务被成功应用后，Zookeeper可以保证客户端立即可以读取到这个事务变更后的最新状态的数据。")])]),e._v(" "),_("h2",{attrs:{id:"二、zookeeper设计目标"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、zookeeper设计目标"}},[e._v("#")]),e._v(" 二、Zookeeper设计目标")]),e._v(" "),_("p",[e._v("Zookeeper致力于为那些高吞吐的大型分布式系统提供一个高性能、高可用、且具有严格顺序访问控制能力的分布式协调服务。它具有以下四个目标：")]),e._v(" "),_("p",[_("strong",[_("u",[e._v("目标一：简单的数据模型")])])]),e._v(" "),_("p",[e._v("Zookeeper通过树形结构来存储数据，它由一系列被称为ZNode的数据节点组成，类似于常见的文件系统。不过和常见的文件系统不同，Zookeeper将数据全量存储在内存中，以此来实现高吞吐，减少访问延迟。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://5b0988e595225.cdn.sohucs.com/images/20190626/ed03fbe77a704a9aa0634dab18647cf2.jpeg",alt:"img"}})]),e._v(" "),_("p",[_("strong",[_("u",[e._v("目标二：构建集群")])])]),e._v(" "),_("p",[e._v("可以由一组Zookeeper服务构成Zookeeper集群，集群中每台机器都会单独在内存中维护自身的状态，并且每台机器之间都保持着通讯，只要集群中有半数机器能够正常工作，那么整个集群就可以正常提供服务。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://5b0988e595225.cdn.sohucs.com/images/20190626/f5a8d701bcc54c1e8e81ad34ab4fc8f9.jpeg",alt:"img"}})]),e._v(" "),_("p",[_("strong",[_("u",[e._v("目标三：顺序访问")])])]),e._v(" "),_("p",[e._v("对于来自客户端的每个更新请求，Zookeeper都会分配一个全局唯一的递增ID，这个ID反映了所有事务请求的先后顺序。")]),e._v(" "),_("p",[_("strong",[_("u",[e._v("目标四：高性能高可用")])])]),e._v(" "),_("p",[e._v("ZooKeeper将数据存全量储在内存中以保持高性能，并通过服务集群来实现高可用，由于Zookeeper的所有更新和删除都是基于事务的，所以其在读多写少的应用场景中有着很高的性能表现。")]),e._v(" "),_("h2",{attrs:{id:"三、核心概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、核心概念"}},[e._v("#")]),e._v(" 三、核心概念")]),e._v(" "),_("p",[_("strong",[_("u",[e._v("1）集群角色")])])]),e._v(" "),_("p",[e._v("Zookeeper集群中的机器分为以下三种角色：")]),e._v(" "),_("ul",[_("li",[_("strong",[e._v("Leader")]),e._v(" ：为客户端提供读写服务，并维护集群状态，它是由集群选举所产生的；")]),e._v(" "),_("li",[_("strong",[e._v("Follower")]),e._v(" ：为客户端提供读写服务，并定期向Leader汇报自己的节点状态。同时也参与写操作“过半写成功”的策略和Leader的选举；")]),e._v(" "),_("li",[_("strong",[e._v("Observer")]),e._v(" ：为客户端提供读写服务，并定期向Leader汇报自己的节点状态，但不参与写操作“过半写成功”的策略和Leader的选举，因此Observer可以在不影响写性能的情况下提升集群的读性能。")])]),e._v(" "),_("p",[_("strong",[_("u",[e._v("2）会话")])])]),e._v(" "),_("p",[e._v("Zookeeper客户端通过TCP长连接连接到服务集群，会话(Session)从第一次连接开始就已经建立，之后通过心跳检测机制来保持有效的会话状态。通过这个连接，客户端可以发送请求并接收响应，同时也可以接收到Watch事件的通知。")]),e._v(" "),_("p",[e._v("关于会话中另外一个核心的概念是sessionTimeOut(会话超时时间)，当由于网络故障或者客户端主动断开等原因，导致连接断开，此时只要在会话超时时间之内重新建立连接，则之前创建的会话依然有效。")]),e._v(" "),_("p",[_("strong",[_("u",[e._v("3）数据节点")])])]),e._v(" "),_("p",[e._v("Zookeeper数据模型是由一系列基本数据单元 Znode (数据节点)组成的节点树，其中根节点为 / 。每个节点上都会保存自己的数据和节点信息。Zookeeper中节点可以分为两大类：")]),e._v(" "),_("ul",[_("li",[_("strong",[e._v("持久节点")]),e._v(" ：节点一旦创建，除非被主动删除，否则一直存在；")]),e._v(" "),_("li",[_("strong",[e._v("临时节点")]),e._v(" ：一旦创建该节点的客户端会话失效，则所有该客户端创建的临时节点都会被删除。")])]),e._v(" "),_("p",[e._v("临时节点和持久节点都可以添加一个特殊的属性： SEQUENTIAL ，代表该节点是否具有递增属性。如果指定该属性，那么在这个节点创建时，Zookeeper会自动在其节点名称后面追加一个由父节点维护的递增数字。")]),e._v(" "),_("p",[_("strong",[_("u",[e._v("4）节点信息")])])]),e._v(" "),_("p",[e._v("每个ZNode节点在存储数据的同时，都会维护一个叫做 Stat 的数据结构，里面存储了关于该节点的全部状态信息。如下：")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://5b0988e595225.cdn.sohucs.com/images/20190626/b8f97ff85ebb4b65a8485c4e465249af.jpeg",alt:"img"}})]),e._v(" "),_("p",[_("strong",[_("u",[e._v("5）Watcher")])])]),e._v(" "),_("p",[e._v("Zookeeper中一个常用的功能是Watcher(事件监听器)，它允许用户在指定节点上针对感兴趣的事件注册监听，当事件发生时，监听器会被触发，并将事件信息推送到客户端。该机制是Zookeeper实现分布式协调服务的重要特性。")]),e._v(" "),_("p",[_("strong",[_("u",[e._v("6）ACL")])])]),e._v(" "),_("p",[e._v("Zookeeper采用ACL(Access Control Lists)策略来进行权限控制，类似于UNIX文件系统的权限控制。它定义了如下五种权限：")]),e._v(" "),_("ul",[_("li",[_("strong",[e._v("CREATE")]),e._v(" ：允许创建子节点；")]),e._v(" "),_("li",[_("strong",[e._v("READ")]),e._v(" ：允许从节点获取数据并列出其子节点；")]),e._v(" "),_("li",[_("strong",[e._v("WRITE")]),e._v(" ：允许为节点设置数据；")]),e._v(" "),_("li",[_("strong",[e._v("DELETE")]),e._v(" ：允许删除子节点；")]),e._v(" "),_("li",[_("strong",[e._v("ADMIN")]),e._v(" ：允许为节点设置权限。")])]),e._v(" "),_("h2",{attrs:{id:"四、zab协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四、zab协议"}},[e._v("#")]),e._v(" 四、ZAB协议")]),e._v(" "),_("h3",{attrs:{id:"_1-zab协议与数据一致性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-zab协议与数据一致性"}},[e._v("#")]),e._v(" 1）ZAB协议与数据一致性")]),e._v(" "),_("p",[e._v("ZAB协议是Zookeeper专门设计的一种支持崩溃恢复的原子广播协议。通过该协议，Zookeepe基于主从模式的系统架构来保持集群中各个副本之间数据的一致性。具体如下：")]),e._v(" "),_("p",[e._v("Zookeeper使用一个单一的主进程来接收并处理客户端的所有事务请求，并采用原子广播协议将数据状态的变更以事务Proposal的形式广播到所有的副本进程上去。如下图：")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://5b0988e595225.cdn.sohucs.com/images/20190626/4c95aaebed0845ed8903df17b0d1c530.jpeg",alt:"img"}})]),e._v(" "),_("p",[_("strong",[_("u",[e._v("具体流程如下：")])])]),e._v(" "),_("p",[e._v("所有的事务请求必须由唯一的Leader服务来处理，Leader服务将事务请求转换为事务Proposal，并将该Proposal分发给集群中所有的Follower服务。如果有半数的Follower服务进行了正确的反馈，那么Leader就会再次向所有的Follower发出Commit消息，要求将前一个Proposal进行提交。")]),e._v(" "),_("h3",{attrs:{id:"_2-zab协议的内容"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-zab协议的内容"}},[e._v("#")]),e._v(" 2）ZAB协议的内容")]),e._v(" "),_("p",[e._v("ZAB协议包括两种基本的模式，分别是崩溃恢复和消息广播：")]),e._v(" "),_("p",[_("strong",[_("u",[e._v("1. 崩溃恢复")])])]),e._v(" "),_("p",[e._v("当整个服务框架在启动过程中，或者当Leader服务器出现异常时，ZAB协议就会进入恢复模式，通过过半选举机制产生新的Leader，之后其他机器将从新的Leader上同步状态，当有过半机器完成状态同步后，就退出恢复模式，进入消息广播模式。")]),e._v(" "),_("p",[_("strong",[_("u",[e._v("2. 消息广播")])])]),e._v(" "),_("p",[e._v("ZAB协议的消息广播过程使用的是原子广播协议。在整个消息的广播过程中，Leader服务器会每个事物请求生成对应的Proposal，并为其分配一个全局唯一的递增的事务ID(ZXID)，之后再对其进行广播。具体过程如下：")]),e._v(" "),_("p",[e._v("Leader服务会为每一个Follower服务器分配一个单独的队列，然后将事务Proposal依次放入队列中，并根据FIFO(先进先出)的策略进行消息发送。Follower服务在接收到Proposal后，会将其以事务日志的形式写入本地磁盘中，并在写入成功后反馈给Leader一个Ack响应。当Leader接收到超过半数Follower的Ack响应后，就会广播一个Commit消息给所有的Follower以通知其进行事务提交，之后Leader自身也会完成对事务的提交。而每一个Follower则在接收到Commit消息后，完成事务的提交。")]),e._v(" "),_("p",[_("img",{attrs:{src:"http://5b0988e595225.cdn.sohucs.com/images/20190626/d7411290473f4ddda9b00943e88c708c.jpeg",alt:"img"}})]),e._v(" "),_("h2",{attrs:{id:"五、zookeeper的典型应用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#五、zookeeper的典型应用场景"}},[e._v("#")]),e._v(" 五、Zookeeper的典型应用场景")]),e._v(" "),_("p",[_("strong",[_("u",[e._v("1）数据的发布/订阅")])])]),e._v(" "),_("p",[e._v("数据的发布/订阅系统，通常也用作配置中心。在分布式系统中，你可能有成千上万个服务节点，如果想要对所有服务的某项配置进行更改，由于数据节点过多，你不可逐台进行修改，而应该在设计时采用统一的配置中心。之后发布者只需要将新的配置发送到配置中心，所有服务节点即可自动下载并进行更新，从而实现配置的集中管理和动态更新。")]),e._v(" "),_("p",[e._v("Zookeeper通过Watcher机制可以实现数据的发布和订阅。分布式系统的所有的服务节点可以对某个ZNode注册监听，之后只需要将新的配置写入该ZNode，所有服务节点都会收到该事件。")]),e._v(" "),_("p",[_("u",[_("strong",[e._v("2） 命名服务")])])]),e._v(" "),_("p",[e._v("在分布式系统中，通常需要一个全局唯一的名字，如生成全局唯一的订单号等，Zookeeper可以通过顺序节点的特性来生成全局唯一ID，从而可以对分布式系统提供命名服务。")]),e._v(" "),_("p",[_("strong",[_("u",[e._v("3）Master选举")])])]),e._v(" "),_("p",[e._v("分布式系统一个重要的模式就是主从模式(Master/Salves)，Zookeeper可以用于该模式下的Matser选举。可以让所有服务节点去竞争性地创建同一个ZNode，由于Zookeeper不能有路径相同的ZNode，必然只有一个服务节点能够创建成功，这样该服务节点就可以成为Master节点。")]),e._v(" "),_("p",[_("strong",[_("u",[e._v("4）分布式锁")])])]),e._v(" "),_("p",[e._v("可以通过Zookeeper的临时节点和Watcher机制来实现分布式锁，这里以排它锁为例进行说明：")]),e._v(" "),_("p",[e._v("分布式系统的所有服务节点可以竞争性地去创建同一个临时ZNode，由于Zookeeper不能有路径相同的ZNode，必然只有一个服务节点能够创建成功，此时可以认为该节点获得了锁。其他没有获得锁的服务节点通过在该ZNode上注册监听，从而当锁释放时再去竞争获得锁。锁的释放情况有以下两种：")]),e._v(" "),_("ul",[_("li",[e._v("当正常执行完业务逻辑后，客户端主动将临时ZNode删除，此时锁被释放；")]),e._v(" "),_("li",[e._v("当获得锁的客户端发生宕机时，临时ZNode会被自动删除，此时认为锁已经释放。")])]),e._v(" "),_("p",[e._v("当锁被释放后，其他服务节点则再次去竞争性地进行创建，但每次都只有一个服务节点能够获取到锁，这就是排他锁。")]),e._v(" "),_("p",[_("strong",[_("u",[e._v("5）集群管理")])])]),e._v(" "),_("p",[e._v("Zookeeper还能解决大多数分布式系统中的问题：")]),e._v(" "),_("ul",[_("li",[e._v("如可以通过创建临时节点来建立心跳检测机制。如果分布式系统的某个服务节点宕机了，则其持有的会话会超时，此时该临时节点会被删除，相应的监听事件就会被触发。")]),e._v(" "),_("li",[e._v("分布式系统的每个服务节点还可以将自己的节点状态写入临时节点，从而完成状态报告或节点工作进度汇报。")]),e._v(" "),_("li",[e._v("通过数据的订阅和发布功能，Zookeeper还能对分布式系统进行模块的解耦和任务的调度。")]),e._v(" "),_("li",[e._v("通过监听机制，还能对分布式系统的服务节点进行动态上下线，从而实现服务的动态扩容。")])]),e._v(" "),_("p",[e._v("转载自： "),_("a",{attrs:{href:"https://www.sohu.com/a/323031234_120104204",target:"_blank",rel:"noopener noreferrer"}},[e._v("大神分享，十分钟深入了解ZooKeeper核心概念 - 搜狐网"),_("OutboundLink")],1)])])}),[],!1,null,null,null);o.default=r.exports}}]);