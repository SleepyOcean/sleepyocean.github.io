(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{535:function(e,a,t){"use strict";t.r(a);var r=t(42),_=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("本篇从以下几个方面解说数据库索引的知识点：MySQL索引是什么、MySQL索引底层数据结构与算法、MySQL索引最左前缀原理。本文是面试必问的知识点，需重点关注哦~\n")]),e._v(" "),t("h3",{attrs:{id:"_1-1-概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-概述"}},[e._v("#")]),e._v(" 1.1 概述")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("索引")]),e._v("是帮助MySQL高效获取数据的"),t("strong",[e._v("排好序")]),e._v("的"),t("strong",[e._v("数据结构")])]),e._v(" "),t("li",[e._v("索引存储在文件里")]),e._v(" "),t("li",[e._v("索引结构：BTREE")])]),e._v(" "),t("h3",{attrs:{id:"_1-2-磁盘存取原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-磁盘存取原理"}},[e._v("#")]),e._v(" 1.2 磁盘存取原理")]),e._v(" "),t("ul",[t("li",[e._v("磁盘寻道，时间(速度慢，费时)")]),e._v(" "),t("li",[e._v("数据读取，旋转时间(速度较快)")])]),e._v(" "),t("h3",{attrs:{id:"_1-3-数据结构-b-tree"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-数据结构-b-tree"}},[e._v("#")]),e._v(" 1.3 数据结构 B-Tree")]),e._v(" "),t("ul",[t("li",[e._v("度(Degree)-节点的数据存储个数")]),e._v(" "),t("li",[e._v("叶节点具有相同的深度")]),e._v(" "),t("li",[e._v("叶节点的指针为空")]),e._v(" "),t("li",[e._v("节点中的数据key从左到右递增排列")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://gallery.sleepyocean.cn/resource/img/b673dc47a9671d1aa83139cfda5c9cd3",alt:"B-Tree示意图"}})]),e._v(" "),t("h3",{attrs:{id:"_1-4-mysql索引数据结构-b-tree"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-mysql索引数据结构-b-tree"}},[e._v("#")]),e._v(" 1.4 MySQL索引数据结构 B+Tree")]),e._v(" "),t("h4",{attrs:{id:"_1-4-1-b-tree的特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1-b-tree的特点"}},[e._v("#")]),e._v(" 1.4.1 B+Tree的特点")]),e._v(" "),t("ul",[t("li",[e._v("非叶子节点不存储data，只存储key，可以增大度")]),e._v(" "),t("li",[e._v("叶子节点不存储指针")]),e._v(" "),t("li",[e._v("顺序访问指针，提高区间访问的性能")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://gallery.sleepyocean.cn/resource/img/51005ea4abb6ea8ca92d7eeabcbc1e2a",alt:"B+Tree示意图"}})]),e._v(" "),t("h4",{attrs:{id:"_1-4-2-b-tree索引的性能分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-2-b-tree索引的性能分析"}},[e._v("#")]),e._v(" 1.4.2 B+Tree索引的性能分析")]),e._v(" "),t("ul",[t("li",[e._v("一般使用磁盘I/O次数评价索引结构的优劣")]),e._v(" "),t("li",[e._v("预读：磁盘一般会顺序向后读取一定长度的数据(页的整数倍)放入内存")]),e._v(" "),t("li",[e._v("局部性原理：当一个数据被用到时，其附近的数据也通常会马上被使用")]),e._v(" "),t("li",[e._v("B+Tree节点的大小设为等于一个页，每次新建节点直接申请一个页的空间，这样就保证一个节点物理上也存储在一个页里，就实现了一个节点的载入只需一次I/O")]),e._v(" "),t("li",[e._v("B+Tree的度d一般会超过100，因此树的深度h会非常小(一般为3到5之间)")])]),e._v(" "),t("h3",{attrs:{id:"_1-5-mysql的主流引擎的索引实现-myisam-和-innodb"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-mysql的主流引擎的索引实现-myisam-和-innodb"}},[e._v("#")]),e._v(" 1.5 MySQL的主流引擎的索引实现（MyISAM 和 InnoDB）")]),e._v(" "),t("h4",{attrs:{id:"_1-5-1-myisam索引实现-非聚集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-1-myisam索引实现-非聚集"}},[e._v("#")]),e._v(" 1.5.1 MyISAM索引实现(非聚集)")]),e._v(" "),t("p",[e._v("MyISAM索引文件和数据文件是分离的")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://gallery.sleepyocean.cn/resource/img/56558ae2b78e0e1eb08c0ec0cd897e35",alt:"MyISAM主键索引结构"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"https://gallery.sleepyocean.cn/resource/img/a1ff476466acd5910b5b0e774f31c88a",alt:"MyISAM非主键索引结构"}})]),e._v(" "),t("h4",{attrs:{id:"_1-5-2-innodb索引实现-聚集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-2-innodb索引实现-聚集"}},[e._v("#")]),e._v(" 1.5.2 InnoDB索引实现(聚集)")]),e._v(" "),t("ul",[t("li",[e._v("数据文件本身就是索引文件")]),e._v(" "),t("li",[e._v("表数据文件本身就是按B+Tree组织的一个索引结构文件")]),e._v(" "),t("li",[e._v("聚集索引-叶节点包含了完整的数据记录")]),e._v(" "),t("li",[e._v("为什么InnoDB表必须有主键，并且推荐使用整型的自增主键？（非主键索引的叶子节点存储的是主键值；自增主键便于新增以及查找）")]),e._v(" "),t("li",[e._v("为什么非主键索引结构叶子节点存储的是主键值？(数据一致性和节省存储空间)")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://gallery.sleepyocean.cn/resource/img/28ab78712aefd670f6db374df9751be1",alt:"InnoDB主键索引结构"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"https://gallery.sleepyocean.cn/resource/img/c74f7528c31413dc0917ca37547a5b6d",alt:"InnoDB非主键索引结构"}})]),e._v(" "),t("h3",{attrs:{id:"_1-6-联合索引的底层存储结构长什么样"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-联合索引的底层存储结构长什么样"}},[e._v("#")]),e._v(" 1.6 联合索引的底层存储结构长什么样")]),e._v(" "),t("p",[e._v("联合索引的比较遵循『索引最左前缀原理』，即依次比较主键，直到可以比较出结果。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://gallery.sleepyocean.cn/resource/img/2ecdc6dec92dbcdb85b64c9ea35cdb5e",alt:"联合索引的底层存储结构"}})])])}),[],!1,null,null,null);a.default=_.exports}}]);