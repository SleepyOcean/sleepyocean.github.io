(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{478:function(s,e,v){"use strict";v.r(e);var _=v(42),t=Object(_.a)({},(function(){var s=this,e=s.$createElement,v=s._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[v("p",[s._v("本文带你了解面试Redis常问的知识点。\n")]),s._v(" "),v("h3",{attrs:{id:"_1-redis是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-redis是什么"}},[s._v("#")]),s._v(" 1. Redis是什么")]),s._v(" "),v("p",[s._v("简单来说redis就是一个"),v("strong",[s._v("数据库")]),s._v("，不过与传统数据库不同的是redis的数据库是存在"),v("strong",[s._v("内存")]),s._v("中，所以"),v("strong",[s._v("读写速度非常快")]),s._v("，因此redis被广泛应用于"),v("strong",[s._v("缓存")]),s._v("方向。另外，redis也经常用来做"),v("strong",[s._v("分布式锁")]),s._v("，redis提供了多种数据类型来支持不同的业务场景。除此之外，"),v("strong",[s._v("redis 支持事务")]),s._v(" 、"),v("strong",[s._v("持久化")]),s._v("、"),v("strong",[s._v("LUA脚本")]),s._v("、"),v("strong",[s._v("LRU驱动事件")]),s._v("、"),v("strong",[s._v("多种集群")]),s._v("方案。")]),s._v(" "),v("h3",{attrs:{id:"_2-为什么要用redis"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么要用redis"}},[s._v("#")]),s._v(" 2. 为什么要用Redis")]),s._v(" "),v("ol",[v("li",[v("strong",[s._v("高性能")]),s._v("：假如用户第一次访问数据库中的某些数据。这个过程会比较慢，因为是从"),v("strong",[s._v("硬盘上读取")]),s._v("的。将该用户访问的"),v("strong",[s._v("数据存在缓存")]),s._v("中，这样下一次再访问这些数据的时候就可以直接从缓存中获取了。操"),v("strong",[s._v("作缓存就是直接操作内存，所以速度相当快")]),s._v("。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！")]),s._v(" "),v("li",[v("strong",[s._v("高并发")]),s._v("："),v("strong",[s._v("直接操作缓存能够承受的请求是远远大于直接访问数据库的")]),s._v("，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。")])]),s._v(" "),v("h3",{attrs:{id:"_3-使用redis有哪些好处"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用redis有哪些好处"}},[s._v("#")]),s._v(" 3. 使用Redis有哪些好处")]),s._v(" "),v("ol",[v("li",[v("strong",[s._v("速度快")]),s._v("，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)")]),s._v(" "),v("li",[s._v("支持丰富数据类型，支持"),v("strong",[s._v("string，list，set，sorted set，hash")])]),s._v(" "),v("li",[v("strong",[s._v("支持事务")]),s._v("，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行")]),s._v(" "),v("li",[s._v("丰富的特性："),v("strong",[s._v("可用于缓存，消息，按key设置过期时间，过期后将会自动删除")])]),s._v(" "),v("li",[s._v("等等…")])]),s._v(" "),v("h3",{attrs:{id:"_4-为什么要用redis而不用map-guava做缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-为什么要用redis而不用map-guava做缓存"}},[s._v("#")]),s._v(" 4. 为什么要用Redis而不用map/guava做缓存")]),s._v(" "),v("p",[s._v("缓存分为"),v("strong",[s._v("本地缓存")]),s._v("和"),v("strong",[s._v("分布式缓存")]),s._v("。以 Java 为例，使用自带的 "),v("strong",[s._v("map 或者 guava 实现的是本地缓存")]),s._v("，最主要的特点是"),v("strong",[s._v("轻量以及快速，生命周期随着 jvm 的销毁而结束，并且在多实例的情况下，每个实例都需要各自保存一份缓存，缓 存不具有一致性。")])]),s._v(" "),v("p",[s._v("使用 "),v("strong",[s._v("redis 或 memcached 之类的称为分布式缓存")]),s._v("，在多实例的情况下，各实例共用一份缓存数据，"),v("strong",[s._v("缓存具有一致 性")]),s._v("。缺点是需要保持 "),v("strong",[s._v("redis 或 memcached服务的高可用")]),s._v("，整个程序架构上较为复杂。")]),s._v(" "),v("h3",{attrs:{id:"_5-redis相比memcached有哪些优势"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-redis相比memcached有哪些优势"}},[s._v("#")]),s._v(" 5. Redis相比Memcached有哪些优势")]),s._v(" "),v("ol",[v("li",[s._v("memcached所有的值"),v("strong",[s._v("均是简单的字符串")]),s._v("，redis作为其替代者，支持更为"),v("strong",[s._v("丰富的数据类型")])]),s._v(" "),v("li",[s._v("redis的速度比memcached"),v("strong",[s._v("快")]),s._v("很多")]),s._v(" "),v("li",[s._v("redis可以"),v("strong",[s._v("持久化")]),s._v("其数据")])]),s._v(" "),v("h3",{attrs:{id:"_6-redis的线程模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-redis的线程模型"}},[s._v("#")]),s._v(" 6. Redis的线程模型")]),s._v(" "),v("p",[s._v("redis 内部使用文件事件处理器 "),v("code",[s._v("file event handler")]),s._v("，这个文件事件处理器是"),v("strong",[s._v("单线程")]),s._v("的，所以 redis 才叫做"),v("strong",[s._v("单线程的模型")]),s._v("。它采用 "),v("strong",[s._v("IO 多路复用机制")]),s._v("同时监听多个 socket，根据 socket 上的事件来"),v("strong",[s._v("选择对应的事件处理器")]),s._v("进行处理。")]),s._v(" "),v("p",[s._v("文件事件处理器的结构包含 4 个部分：")]),s._v(" "),v("ul",[v("li",[s._v("多个 socket")]),s._v(" "),v("li",[s._v("IO多路复用程序")]),s._v(" "),v("li",[s._v("文件事件分派器")]),s._v(" "),v("li",[s._v("事件处理器（连接应答处理器、命令请求处理器、命令回复处理器）")])]),s._v(" "),v("p",[s._v("多个 socket 可能会"),v("strong",[s._v("并发产生不同的操作")]),s._v("，每个操作对应不同的文件事件，但是 IO 多路复用程序会监听多个 socket，会将 socket 产生的"),v("strong",[s._v("事件放入队列中排队")]),s._v("，事件分派器每次从队列中取出一个事件，把该事件交给对应的"),v("strong",[s._v("事件处理器")]),s._v("进行处理。")]),s._v(" "),v("h3",{attrs:{id:"_7-redis常见性能问题和解决方案"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-redis常见性能问题和解决方案"}},[s._v("#")]),s._v(" 7. Redis常见性能问题和解决方案")]),s._v(" "),v("ol",[v("li",[s._v("Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件")]),s._v(" "),v("li",[s._v("如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次")]),s._v(" "),v("li",[s._v("为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内")]),s._v(" "),v("li",[s._v("尽量避免在压力很大的主库上增加从库")]),s._v(" "),v("li",[s._v("主从复制不要用图状结构，用单向链表结构更为稳定，即：Master <- Slave1 <- Slave2 <- Slave3…")])]),s._v(" "),v("h3",{attrs:{id:"_8-redis常见数据结构以及使用场景分析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8-redis常见数据结构以及使用场景分析"}},[s._v("#")]),s._v(" 8. Redis常见数据结构以及使用场景分析")]),s._v(" "),v("h4",{attrs:{id:"string"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[s._v("#")]),s._v(" String")]),s._v(" "),v("blockquote",[v("p",[s._v("常用命令: set,get,decr,incr,mget 等。")])]),s._v(" "),v("p",[s._v("String数据结构是简单的key-value类型，value其实不仅可以是String，也可以是数字。 常规key-value缓存应用； 常规计数：微博数，粉丝数等。")]),s._v(" "),v("h4",{attrs:{id:"hash"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[s._v("#")]),s._v(" Hash")]),s._v(" "),v("blockquote",[v("p",[s._v("常用命令： hget,hset,hgetall 等。")])]),s._v(" "),v("p",[s._v("Hash 是一个 string 类型的 ﬁeld 和 value 的映射表，hash 特别适合用于存储对象，后续操作的时候，你可以直接仅 仅修改这个对象中的某个字段的值。 比如我们可以Hash数据结构来存储用户信息，商品信息等等。")]),s._v(" "),v("h4",{attrs:{id:"list"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[s._v("#")]),s._v(" List")]),s._v(" "),v("blockquote",[v("p",[s._v("常用命令: lpush,rpush,lpop,rpop,lrange等")])]),s._v(" "),v("p",[s._v("list 就是链表，Redis list 的应用场景非常多，也是Redis最重要的数据结构之一，比如微博的关注列表，粉丝列表， 消息列表等功能都可以用Redis的 list 结构来实现。")]),s._v(" "),v("p",[s._v("Redis list 的实现为一个双向链表，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销。")]),s._v(" "),v("p",[s._v("另外可以通过 lrange 命令，就是从某个元素开始读取多少个元素，可以基于 list 实现分页查询，这个很棒的一个功 能，基于 redis 实现简单的高性能分页，可以做类似微博那种下拉不断分页的东西（一页一页的往下走），性能高。")]),s._v(" "),v("h4",{attrs:{id:"set"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[s._v("#")]),s._v(" Set")]),s._v(" "),v("blockquote",[v("p",[s._v("常用命令： sadd,spop,smembers,sunion 等")])]),s._v(" "),v("p",[s._v("set 对外提供的功能与list类似是一个列表的功能，特殊之处在于 set 是可以自动排重的。")]),s._v(" "),v("p",[s._v("当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在 一个set集合内的重要接口，这个也是list所不能提供的。可以基于 set 轻易实现交集、并集、差集的操作。")]),s._v(" "),v("p",[s._v("比如：在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis可以非常 方便的实现如共同关注、共同粉丝、共同喜好等功能。这个过程也就是求交集的过程，具体命令如下："),v("code",[s._v("sinterstore key1 key2 key3")]),s._v("将交集存在key1内")]),s._v(" "),v("h4",{attrs:{id:"sorted-set"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#sorted-set"}},[s._v("#")]),s._v(" Sorted Set")]),s._v(" "),v("blockquote",[v("p",[s._v("常用命令： zadd,zrange,zrem,zcard等")])]),s._v(" "),v("p",[s._v("和set相比，sorted set增加了一个权重参数score，使得集合中的元素能够按score进行有序排列。")]),s._v(" "),v("p",[s._v("举例： 在直播系统中，实时排行信息包含直播间在线用户列表，各种礼物排行榜，弹幕消息（可以理解为按消息维 度的消息排行榜）等信息，适合使用 Redis 中的 SortedSet 结构进行存储。")]),s._v(" "),v("h3",{attrs:{id:"_9-redis设置过期时间"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_9-redis设置过期时间"}},[s._v("#")]),s._v(" 9. Redis设置过期时间")]),s._v(" "),v("p",[s._v("Redis中有个设置时间过期的功能，即对存储在 redis 数据库中的值可以设置一个过期时间。作为一个缓存数据库， 这是非常实用的。如我们一般项目中的 token 或者一些登录信息，尤其是短信验证码都是有时间限制的，按照传统 的数据库处理方式，一般都是自己判断过期，这样无疑会严重影响项目性能。")]),s._v(" "),v("p",[s._v("我们 set key 的时候，都可以给一个 expire time，就是过期时间，通过过期时间我们可以指定这个 key 可以存活的 时间。")]),s._v(" "),v("h4",{attrs:{id:"定期删除-惰性删除"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#定期删除-惰性删除"}},[s._v("#")]),s._v(" 定期删除+惰性删除")]),s._v(" "),v("ul",[v("li",[s._v("定期删除：redis默认是每隔 100ms 就随机抽取一些设置了过期时间的key，检查其是否过期，如果过期就删 除。注意这里是随机抽取的。为什么要随机呢？你想一想假如 redis 存了几十万个 key ，每隔100ms就遍历所 有的设置过期时间的 key 的话，就会给 CPU 带来很大的负载！")]),s._v(" "),v("li",[s._v("惰性删除 ：定期删除可能会导致很多过期 key 到了时间并没有被删除掉。所以就有了惰性删除。假如你的过期 key，靠定期删除没有被删除掉，还停留在内存里，除非你的系统去查一下那个 key，才会被redis给删除掉。这 就是所谓的惰性删除，也是够懒的哈！")])]),s._v(" "),v("p",[s._v("如果定期删除漏掉了很多过期 key，然后你也没及时去查， 也就没走惰性删除，此时会怎么样？如果大量过期key堆积在内存里，导致redis内存块耗尽了。怎么解决这个问题 呢？")]),s._v(" "),v("p",[v("strong",[s._v("redis 内存淘汰机制。")])]),s._v(" "),v("h3",{attrs:{id:"_10-mysql有2000万数据-redis只存20万-如何保证redis中的数据都是热点数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-mysql有2000万数据-redis只存20万-如何保证redis中的数据都是热点数据"}},[s._v("#")]),s._v(" 10. Mysql有2000万数据，redis只存20万，如何保证redis中的数据都是热点数据")]),s._v(" "),v("p",[s._v("redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 6种数据淘汰策略：")]),s._v(" "),v("ul",[v("li",[s._v("voltile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰")]),s._v(" "),v("li",[s._v("volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰")]),s._v(" "),v("li",[s._v("volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰")]),s._v(" "),v("li",[s._v("allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰")]),s._v(" "),v("li",[s._v("allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰")]),s._v(" "),v("li",[s._v("no-enviction（驱逐）：禁止驱逐数据")])]),s._v(" "),v("h3",{attrs:{id:"_11-memcache与redis的区别都有哪些"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_11-memcache与redis的区别都有哪些"}},[s._v("#")]),s._v(" 11. Memcache与Redis的区别都有哪些")]),s._v(" "),v("ol",[v("li",[v("p",[s._v("存储方式")]),s._v(" "),v("ol",[v("li",[s._v("Memecache把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。")]),s._v(" "),v("li",[s._v("Redis有部份存在硬盘上，这样能保证数据的持久性。")])])]),s._v(" "),v("li",[v("p",[s._v("数据支持类型")]),s._v(" "),v("ol",[v("li",[s._v("Memcache对数据类型支持相对简单。String")]),s._v(" "),v("li",[s._v("Redis有复杂的数据类型。Redis不仅仅支持简单的k/v类型的数据，同时还提供 list，set，zset，hash等数据结构的存储。")])])]),s._v(" "),v("li",[v("p",[s._v("使用底层模型不同")]),s._v(" "),v("ol",[v("li",[s._v("它们之间底层实现方式 以及与客户端之间通信的应用协议不一样。")]),s._v(" "),v("li",[s._v("Redis直接自己构建了VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。")])])]),s._v(" "),v("li",[v("p",[s._v("集群模式")]),s._v(" "),v("p",[s._v("memcached没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据；但是 redis 目前 是原生支持 cluster 模式的.")])]),s._v(" "),v("li",[v("p",[s._v("Memcached是多线程，非阻塞IO复用的网络模型；Redis使用单线程的多路 IO 复用模型。")])])]),s._v(" "),v("h3",{attrs:{id:"_12-redis持久化机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_12-redis持久化机制"}},[s._v("#")]),s._v(" 12. Redis持久化机制")]),s._v(" "),v("p",[s._v("很多时候我们需要持久化数据也就是将内存中的数据写入到硬盘里面，大部分原因是为了之后重用数据（比如重启机 器、机器故障之后回复数据），或者是为了防止系统故障而将数据备份到一个远程位置。")]),s._v(" "),v("p",[s._v("Redis不同于Memcached的很重一点就是，"),v("strong",[s._v("Redis支持持久化")]),s._v("，而且支持两种不同的持久化操作。Redis的一种持久化方式叫"),v("strong",[s._v("快照（snapshotting，RDB）")]),s._v(",另一种方式是"),v("strong",[s._v("只追加文件（append-only ﬁle,AOF）")]),s._v(".这两种方法各有千 秋，下面我会详细这两种持久化方法是什么，怎么用，如何选择适合自己的持久化方。")]),s._v(" "),v("h4",{attrs:{id:"快照-snapshotting-持久化-rdb"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#快照-snapshotting-持久化-rdb"}},[s._v("#")]),s._v(" 快照（snapshotting）持久化（RDB）")]),s._v(" "),v("p",[s._v("Redis可以通过创建快照来获得存储在内存里面的数据在某个时间点上的副本。Redis创建快照之后，可以对快照进行 备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本（Redis主从结构，主要用来提高Redis性 能），还可以将快照留在原地以便重启服务器的时候使用。")]),s._v(" "),v("p",[s._v("快照持久化是Redis默认采用的持久化方式，在redis.conf配置文件中默认有此下配置：")]),s._v(" "),v("div",{staticClass:"language-shell line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[s._v("save "),v("span",{pre:!0,attrs:{class:"token number"}},[s._v("900")]),s._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#在900秒(15分钟)之后，如果至少有1个key发生变化，Redis就会自动触发BGSAVE命令")]),s._v("\n创建快照。\n\nsave "),v("span",{pre:!0,attrs:{class:"token number"}},[s._v("300")]),s._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#在300秒(5分钟)之后，如果至少有10个key发生变化，Redis就会自动触发BGSAVE命令创建快照。")]),s._v("\n\nsave "),v("span",{pre:!0,attrs:{class:"token number"}},[s._v("60")]),s._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v(" "),v("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#在60秒(1分钟)之后，如果至少有10000个key发生变化，Redis就会自动触发BGSAVE命令创建快照。")]),s._v("\n")])]),s._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[s._v("1")]),v("br"),v("span",{staticClass:"line-number"},[s._v("2")]),v("br"),v("span",{staticClass:"line-number"},[s._v("3")]),v("br"),v("span",{staticClass:"line-number"},[s._v("4")]),v("br"),v("span",{staticClass:"line-number"},[s._v("5")]),v("br"),v("span",{staticClass:"line-number"},[s._v("6")]),v("br")])]),v("h4",{attrs:{id:"aof-append-only-file-持久化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#aof-append-only-file-持久化"}},[s._v("#")]),s._v(" AOF（append-only file）持久化")]),s._v(" "),v("p",[s._v("与快照持久化相比，AOF"),v("strong",[s._v("持久化的实时性更好")]),s._v("，因此已成为主流的持久化方案。默认情况下Redis没有开启 AOF（append only ﬁle）方式的持久化，可以通过appendonly参数开启："),v("code",[s._v("appendonly yes")])]),s._v(" "),v("p",[s._v("开启AOF持久化后每执行一条会更改Redis中的数据的命令，Redis就会将该命令写入硬盘中的AOF文件。AOF文件的 保存位置和RDB文件的位置相同，都是通过dir参数设置的，默认的文件名是appendonly.aof。")]),s._v(" "),v("p",[s._v("在Redis的配置文件中存在三种不同的 AOF 持久化方式，它们分别是：")]),s._v(" "),v("div",{staticClass:"language-shell line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-shell"}},[v("code",[s._v("appendfsync always "),v("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#每次有数据修改发生时都会写入AOF文件,这样会严重降低Redis的速度")]),s._v("\nappendfsync everysec  "),v("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#每秒钟同步一次，显示地将多个写命令同步到硬盘")]),s._v("\nappendfsync no  "),v("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#让操作系统决定何时进行同步")]),s._v("\n")])]),s._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[s._v("1")]),v("br"),v("span",{staticClass:"line-number"},[s._v("2")]),v("br"),v("span",{staticClass:"line-number"},[s._v("3")]),v("br")])]),v("p",[s._v("为了兼顾数据和写入性能，用户可以考虑 appendfsync everysec选项 ，让Redis每秒同步一次AOF文件，Redis性能 几乎没受到任何影响。而且这样即使出现系统崩溃，用户最多只会丢失一秒之内产生的数据。当硬盘忙于执行写入操 作的时候，Redis还会优雅的放慢自己的速度以便适应硬盘的最大写入速度。")]),s._v(" "),v("p",[v("strong",[s._v("Redis 4.0 对于持久化机制的优化")])]),s._v(" "),v("p",[s._v("Redis 4.0 开始支持 RDB 和 AOF 的混合持久化（默认关闭，可以通过配置项 aof-use-rdb-preamble 开启）。")]),s._v(" "),v("p",[s._v("如果把混合持久化打开，AOF 重写的时候就直接把 RDB 的内容写到 AOF 文件开头。这样做的好处是可以结合 RDB 和 AOF 的优点, 快速加载同时避免丢失过多的数据。当然缺点也是有的， AOF 里面的 RDB 部分是压缩格式不再是 AOF 格式，可读性较差。")]),s._v(" "),v("h3",{attrs:{id:"_13-aof重写"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_13-aof重写"}},[s._v("#")]),s._v(" 13. AOF重写")]),s._v(" "),v("p",[s._v("AOF重写可以产生一个新的AOF文件，这个新的AOF文件和原有的AOF文件所保存的数据库状态一样，"),v("strong",[s._v("但体积更小")]),s._v("。")]),s._v(" "),v("p",[s._v("AOF重写是一个有歧义的名字，该功能是通过读取数据库中的"),v("strong",[s._v("键值")]),s._v("对来实现的，程序无须对现有AOF文件进行任伺读 入、分析或者写入操作。")]),s._v(" "),v("p",[s._v("在执行 BGREWRITEAOF 命令时，Redis 服务器会维护一个 AOF "),v("strong",[s._v("重写缓冲区")]),s._v("，该缓冲区会在子进程创建新AOF文件期 间，记录服务器执行的所有写命令。"),v("strong",[s._v("当子进程完成创建新AOF文件的工作之后，服务器会将重写缓冲区中的所有内容 追加到新AOF文件的末尾，使得新旧两个AOF文件所保存的数据库状态一致")]),s._v("。最后，服务器用新的AOF文件替换旧的 AOF文件，以此来完成AOF文件重写操作。")]),s._v(" "),v("h3",{attrs:{id:"_14-redis事务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_14-redis事务"}},[s._v("#")]),s._v(" 14. Redis事务")]),s._v(" "),v("p",[s._v("Redis 通过 MULTI、EXEC、WATCH 等命令来实现事务(transaction)功能。事务提供了一种"),v("strong",[s._v("将多个命令请求打包，然 后一次性、按顺序地执行多个命令的机制，并且在事务执行期间，服务器不会中断事务而改去执行其他客户端的命令 请求，它会将事务中的所有命令都执行完毕")]),s._v("，然后才去处理其他客户端的命令请求。")]),s._v(" "),v("p",[s._v("在传统的关系式数据库中，常常用 ACID 性质来检验事务功能的可靠性和安全性。在 Redis 中，事务"),v("strong",[s._v("总是")]),s._v("具有原子性 （Atomicity)、一致性(Consistency)和隔离性（Isolation），并且当 Redis 运行在某种特定的持久化模式下时，事务 也具有持久性（Durability）。")]),s._v(" "),v("h3",{attrs:{id:"_15-redis常见的性能问题都有哪些-如何解决"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-redis常见的性能问题都有哪些-如何解决"}},[s._v("#")]),s._v(" 15. Redis常见的性能问题都有哪些？如何解决？")]),s._v(" "),v("ol",[v("li",[s._v("Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照。")]),s._v(" "),v("li",[s._v("Master AOF持久化，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，AOF文件过大会影响Master重启的恢复速度。Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。")]),s._v(" "),v("li",[s._v("Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。")]),s._v(" "),v("li",[s._v("Redis主从复制的性能问题，为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内")])]),s._v(" "),v("h3",{attrs:{id:"_16-redis的同步机制了解吗"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_16-redis的同步机制了解吗"}},[s._v("#")]),s._v(" 16. Redis的同步机制了解吗？")]),s._v(" "),v("p",[s._v("主从同步。第一次同步时，"),v("strong",[s._v("主节点做一次bgsave")]),s._v("，并同时将后续修改操作记录到"),v("strong",[s._v("内存buffer")]),s._v("，待完成后"),v("strong",[s._v("将rdb文件全量同步到复制节点")]),s._v("，复制节点接受完成后"),v("strong",[s._v("将rdb镜像加载到内存")]),s._v("。加载完成后，再通知主节点"),v("strong",[s._v("将期间修改的操作记录同步到复制节点进行重放")]),s._v("就完成了同步过程。")]),s._v(" "),v("h3",{attrs:{id:"_17-是否使用redis集群-集群的原理是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_17-是否使用redis集群-集群的原理是什么"}},[s._v("#")]),s._v(" 17. 是否使用Redis集群，集群的原理是什么")]),s._v(" "),v("p",[s._v("Redis Sentinel着眼于高可用，在master宕机时会自动将slave提升为master，继续提供服务。")]),s._v(" "),v("p",[s._v("Redis Cluster着眼于扩展性，在单个redis内存不足时，使用Cluster进行分片存储。")]),s._v(" "),v("h3",{attrs:{id:"_18-缓存雪崩和缓存问题解决方案"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_18-缓存雪崩和缓存问题解决方案"}},[s._v("#")]),s._v(" 18. 缓存雪崩和缓存问题解决方案")]),s._v(" "),v("h4",{attrs:{id:"缓存雪崩"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩"}},[s._v("#")]),s._v(" 缓存雪崩")]),s._v(" "),v("p",[s._v("缓存同一时间大面积的失效，所以，后面的请求都会落到数据库上，造成数据库短时间内承受大量请求而崩 掉。")]),s._v(" "),v("ul",[v("li",[s._v("事前：尽量保证整个 redis 集群的高可用性，发现机器宕机尽快补上。选择合适的内存淘汰策略。")]),s._v(" "),v("li",[s._v("事中：本地ehcache缓存 + hystrix限流&降级，避免MySQL崩掉")]),s._v(" "),v("li",[s._v("事后：利用 redis 持久化机制保存的数据尽快恢复缓存")])]),s._v(" "),v("h4",{attrs:{id:"缓存穿透"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透"}},[s._v("#")]),s._v(" 缓存穿透")]),s._v(" "),v("p",[s._v("一般是黑客故意去请求缓存中不存在的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量 请求而崩掉。")]),s._v(" "),v("p",[s._v("解决办法： 有很多种方法可以有效地解决缓存穿透问题，最常见的则是采用布隆过滤器，将所有可能存在的数据哈 希到一个足够大的"),v("strong",[s._v("bitmap")]),s._v("中，一个一定不存在的数据会被 这个bitmap拦截掉，从而避免了对底层存储系统的查询压 力。另外也有一个更为简单粗暴的方法（我们采用的就是这种），如果一个"),v("strong",[s._v("查询返回的数据为空")]),s._v("（不管是数据不存 在，还是系统故障），我们仍然把这个空结果进行缓存，但它的"),v("strong",[s._v("过期时间会很短")]),s._v("，最长不超过五分钟。")]),s._v(" "),v("h3",{attrs:{id:"_19-如何解决redis的并发竞争key问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_19-如何解决redis的并发竞争key问题"}},[s._v("#")]),s._v(" 19. 如何解决Redis的并发竞争Key问题")]),s._v(" "),v("p",[s._v("所谓 Redis 的并发竞争 Key 的问题也就是多个系统同时对一个 key 进行操作，但是最后执行的顺序和我们期望的顺 序不同，这样也就导致了结果的不同！")]),s._v(" "),v("p",[s._v("推荐一种方案：分布式锁（zookeeper 和 redis 都可以实现分布式锁）。（如果不存在 Redis 的并发竞争 Key 问 题，不要使用分布式锁，这样会影响性能）")]),s._v(" "),v("p",[s._v("基于zookeeper临时有序节点可以实现的分布式锁。大致思想为：每个客户端对某个方法加锁时，在zookeeper上的 与该方法对应的指定节点的目录下，生成一个唯一的瞬时有序节点。 判断是否获取锁的方式很简单，只需要判断有 序节点中序号最小的一个。 当释放锁的时候，只需将这个瞬时节点删除即可。同时，其可以避免服务宕机导致的锁 无法释放，而产生的死锁问题。完成业务流程后，删除对应的子节点释放锁。")]),s._v(" "),v("p",[s._v("在实践中，当然是从以可靠性为主。所以首推Zookeeper。")]),s._v(" "),v("h3",{attrs:{id:"_20-如何保证缓存与数据库双写时的数据一致性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_20-如何保证缓存与数据库双写时的数据一致性"}},[s._v("#")]),s._v(" 20. 如何保证缓存与数据库双写时的数据一致性")]),s._v(" "),v("p",[s._v("你只要用缓存，就可能会涉及到缓存与数据库双存储双写，你只要是双写，就一定会有数据一致性的问题，那么你如 何解决一致性问题？")]),s._v(" "),v("p",[s._v("一般来说，就是如果你的系统不是严格要求缓存+数据库必须一致性的话，缓存可以稍微的跟数据库偶尔有不一致的 情况，最好不要做这个方案，读请求和写请求串行化，串到一个内存队列里去，这样就可以保证一定不会出现不一致 的情况")]),s._v(" "),v("p",[s._v("串行化之后，就会导致系统的吞吐量会大幅度的降低，用比正常情况下多几倍的机器去支撑线上的一个请求。")])])}),[],!1,null,null,null);e.default=t.exports}}]);