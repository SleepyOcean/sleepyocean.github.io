(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{468:function(e,r,t){"use strict";t.r(r);var v=t(42),_=Object(v.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("WireGuard 是一个易于配置、快速且安全的开源 VPN，它利用了最新的加密技术。目的是提供一种更快、更简单、更精简的通用 VPN，它可以轻松地在树莓派这类低端设备到高端服务器上部署。")]),e._v(" "),t("p",[e._v("Linux作者Linus Torvalds曾公开表示：我能否再次声明对它的爱，并希望它能很快合并？也许代码不是完美的，但我不在乎，与 OpenVPN 和 IPSec 的恐怖相比，这是一件艺术品。")]),e._v(" "),t("p",[e._v("WireGuard 最初是为 Linux 开发的，但现在可用于 Windows、macOS、BSD、iOS 和 Android。它仍在活跃开发中。除了可以跨平台之外，WireGuard 的最大优点之一就是易于部署。配置和部署 WireGuard 就像配置和使用 SSH 一样容易。")]),e._v(" "),t("p",[e._v("其实在WireGuard官方网站（"),t("a",{attrs:{href:"https://www.zkii.net/wp-content/themes/begin/inc/go.php?url=https://www.wireguard.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.wireguard.com/"),t("OutboundLink")],1),e._v("）有详细的安装教程，鉴于部分用户无法访问，因此波波特意转载如下。")]),e._v(" "),t("p",[t("strong",[e._v("一、配置PPA")])]),e._v(" "),t("p",[e._v("如果你的系统是Ubuntu 14.04，那么在开始安装WireGuard之前请先安装PPA。")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 以下步骤仅限 Ubuntu 14.04 系统执行")]),e._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt")]),e._v(" update\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" software-properties-common -y\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("安装完成后，我们还需要通过 PPA 工具添加 WireGuard 源：")]),e._v(" "),t("p",[e._v("$ add-apt-repository ppa:wireguard/wireguard\n"),t("strong",[e._v("# 执行后提示如下示例内容（仅供参考）：")])]),e._v(" "),t("p",[e._v("root@doubi:~# add-apt-repository ppa:wireguard/wireguard\nWireGuard is a novel VPN that runs inside the Linux Kernel. This is the Ubuntu packaging "),t("strong",[e._v("for")]),e._v(" WireGuard. More info may be found at its website, listed below.")]),e._v(" "),t("p",[e._v("More info: https://www.wireguard.com/\nPackages: wireguard wireguard-tools wireguard-dkms")]),e._v(" "),t("p",[e._v("Install with: $ apt install wireguard")]),e._v(" "),t("p",[e._v("For help, please contact\nMore info: https://launchpad.net/~wireguard/+archive/ubuntu/wireguard\nPress [ENTER] to "),t("strong",[e._v("continue")]),e._v(" or ctrl-c to cancel adding it\n"),t("strong",[e._v("# 这里会提示你是否继续，点击 回车键 继续，点击 Ctrl+C 键退出。")]),e._v(" "),t("strong",[e._v("# 然后输出大概如下内容。")])]),e._v(" "),t("p",[e._v("gpg: keyring '/tmp/tmp8bgitjjx/secring.gpg' created\ngpg: keyring '/tmp/tmp8bgitjjx/pubring.gpg' created\ngpg: requesting key 504A1A25 from hkp server keyserver.ubuntu.com\ngpg: /tmp/tmp8bgitjjx/trustdb.gpg: trustdb created\ngpg: key 504A1A25: "),t("strong",[e._v("public")]),e._v(' key "Launchpad PPA for wireguard-ppa" imported\ngpg: Total number processed: 1\ngpg:        imported: 1 (RSA: 1)\nOK')]),e._v(" "),t("p",[t("strong",[e._v("# 以上为输出示例内容（仅供参考）")])]),e._v(" "),t("p",[t("strong",[e._v("二、安装WireGuard")])]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("# 更新一下软件包源")])]),e._v(" "),t("li",[e._v("apt update")]),e._v(" "),t("li"),e._v(" "),t("li",[t("strong",[e._v("# 开始安装 WireGuard ，resolvconf 是用来指定DNS的，旧一些的系统可能没装。")])]),e._v(" "),t("li",[e._v("apt install wireguard resolvconf -y")])]),e._v(" "),t("p",[t("strong",[e._v("三、验证是否安装成功")])]),e._v(" "),t("p",[e._v("当你通过上面的步骤安装完后，请用下面的代码验证一下是否安装成功。")]),e._v(" "),t("ol",[t("li",[e._v("lsmod | grep wireguard")]),e._v(" "),t("li",[t("strong",[e._v("# 执行该代码后，提示大概如下示例内容（仅供参考），第一行是必须要有的，至于下面的两行不同系统似乎还不一样，但是不影响使用。")])]),e._v(" "),t("li"),e._v(" "),t("li",[e._v("root@doubi:~# modprobe wireguard && lsmod | grep wireguard")]),e._v(" "),t("li",[e._v("wireguard       212992 0")]),e._v(" "),t("li",[e._v("ip6_udp_tunnel     16384 1 wireguard")]),e._v(" "),t("li",[e._v("udp_tunnel       16384 1 wireguard")])]),e._v(" "),t("p",[t("strong",[e._v("四、配置步骤")])]),e._v(" "),t("p",[e._v("①生成密钥对。当你确定安装成功后，就要开始配置服务端和客户端的配置文件了。放心，这很简单。")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("# 首先进入配置文件目录，如果该目录不存在请先手动创建：mkdir /etc/wireguard")])]),e._v(" "),t("li",[e._v("cd /etc/wireguard")]),e._v(" "),t("li"),e._v(" "),t("li",[t("strong",[e._v("# 然后开始生成 密匙对(公匙+私匙)。")])]),e._v(" "),t("li",[e._v("wg genkey | tee sprivatekey | wg pubkey > spublickey")]),e._v(" "),t("li",[e._v("wg genkey | tee cprivatekey | wg pubkey > cpublickey")])]),e._v(" "),t("p",[e._v("②查看主网卡名称。先查看一下你的主网卡名是什么：")]),e._v(" "),t("ol",[t("li",[e._v("ip addr")]),e._v(" "),t("li",[t("strong",[e._v("# 执行命令后，示例如下（仅供参考），lo 是本地环回 忽略，eth0 就是主网卡名了。")])]),e._v(" "),t("li",[t("strong",[e._v("# 写着你的服务器外网IP的(下面 X.X.X.X 处)，就是你的主网卡，NAT的服务器则是显示内网IP。")])]),e._v(" "),t("li",[t("strong",[e._v("# 如果你拿不准哪个网卡是主网卡，请留言询问。")])]),e._v(" "),t("li"),e._v(" "),t("li",[e._v("1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group "),t("strong",[e._v("default")]),e._v(" qlen 1")]),e._v(" "),t("li",[e._v("link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00")]),e._v(" "),t("li",[e._v("inet 127.0.0.1/8 scope host lo")]),e._v(" "),t("li",[e._v("​    valid_lft forever preferred_lft forever")]),e._v(" "),t("li",[e._v("inet6 ::1/128 scope host")]),e._v(" "),t("li",[e._v("​    valid_lft forever preferred_lft forever")]),e._v(" "),t("li",[e._v("2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group "),t("strong",[e._v("default")]),e._v(" qlen 1000")]),e._v(" "),t("li",[e._v("link/ether 00:16:3c:cf:89:73 brd ff:ff:ff:ff:ff:ff")]),e._v(" "),t("li",[e._v("inet X.X.X.X/25 brd 255.255.255.255 scope global eth0")]),e._v(" "),t("li",[e._v("​    valid_lft forever preferred_lft forever")])]),e._v(" "),t("p",[e._v("③生成服务端配置文件。")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("# 井号开头的是注释说明，用该命令执行后会自动过滤注释文字。")])]),e._v(" "),t("li",[t("strong",[e._v("# 下面加粗的这一大段都是一个代码！请把下面几行全部复制，然后粘贴到 SSH软件中执行，不要一行一行执行！")])]),e._v(" "),t("li"),e._v(" "),t("li",[e._v('echo "[Interface]')]),e._v(" "),t("li",[e._v("# 服务器的私匙，对应客户端配置中的公匙（自动读取上面刚刚生成的密匙内容）")]),e._v(" "),t("li",[e._v("PrivateKey = $(cat sprivatekey)")]),e._v(" "),t("li",[e._v("# 本机的内网IP地址，一般默认即可，除非和你服务器或客户端设备本地网段冲突")]),e._v(" "),t("li",[e._v("Address = 10.0.0.1/24")]),e._v(" "),t("li",[e._v("# 运行 WireGuard 时要执行的 iptables 防火墙规则，用于打开NAT转发之类的。")]),e._v(" "),t("li",[e._v("# 如果你的服务器主网卡名称不是 eth0 ，那么请修改下面防火墙规则中最后的 eth0 为你的主网卡名称。")]),e._v(" "),t("li",[e._v("PostUp  = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE")]),e._v(" "),t("li",[e._v("# 停止 WireGuard 时要执行的 iptables 防火墙规则，用于关闭NAT转发之类的。")]),e._v(" "),t("li",[e._v("# 如果你的服务器主网卡名称不是 eth0 ，那么请修改下面防火墙规则中最后的 eth0 为你的主网卡名称。")]),e._v(" "),t("li",[e._v("PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE")]),e._v(" "),t("li",[e._v("# 服务端监听端口，可以自行修改")]),e._v(" "),t("li",[e._v("ListenPort = 443")]),e._v(" "),t("li",[e._v("# 服务端请求域名解析 DNS")]),e._v(" "),t("li",[e._v("DNS = 8.8.8.8")]),e._v(" "),t("li",[e._v("# 保持默认")]),e._v(" "),t("li",[e._v("MTU = 1420")]),e._v(" "),t("li",[e._v("# [Peer] 代表客户端配置，每增加一段 [Peer] 就是增加一个客户端账号，具体我稍后会写多用户教程。")]),e._v(" "),t("li",[e._v("[Peer]")]),e._v(" "),t("li",[e._v("# 该客户端账号的公匙，对应客户端配置中的私匙（自动读取上面刚刚生成的密匙内容）")]),e._v(" "),t("li",[e._v("PublicKey = $(cat cpublickey)")]),e._v(" "),t("li",[e._v("# 该客户端账号的内网IP地址")]),e._v(" "),t("li",[e._v("AllowedIPs = 10.0.0.2/32\"|sed '/^#/d;/^\\s*$/d' > wg0.conf")]),e._v(" "),t("li"),e._v(" "),t("li",[t("strong",[e._v("# 上面加粗的这一大段都是一个代码！请把下面几行全部复制，然后粘贴到 SSH软件中执行，不要一行一行执行！")])])]),e._v(" "),t("p",[e._v("④生成客户端配置文件。")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("# 井号开头的是注释说明，用该命令执行后会自动过滤注释文字。")])]),e._v(" "),t("li",[t("strong",[e._v("# 下面加粗的这一大段都是一个代码！请把下面几行全部复制，然后粘贴到 SSH软件中执行，不要一行一行执行！")])]),e._v(" "),t("li"),e._v(" "),t("li",[e._v('echo "[Interface]')]),e._v(" "),t("li",[e._v("# 客户端的私匙，对应服务器配置中的客户端公匙（自动读取上面刚刚生成的密匙内容）")]),e._v(" "),t("li",[e._v("PrivateKey = $(cat cprivatekey)")]),e._v(" "),t("li",[e._v("# 客户端的内网IP地址")]),e._v(" "),t("li",[e._v("Address = 10.0.0.2/24")]),e._v(" "),t("li",[e._v("# 解析域名用的DNS")]),e._v(" "),t("li",[e._v("DNS = 8.8.8.8")]),e._v(" "),t("li",[e._v("# 保持默认")]),e._v(" "),t("li",[e._v("MTU = 1420")]),e._v(" "),t("li",[e._v("[Peer]")]),e._v(" "),t("li",[e._v("# 服务器的公匙，对应服务器的私匙（自动读取上面刚刚生成的密匙内容）")]),e._v(" "),t("li",[e._v("PublicKey = $(cat spublickey)")]),e._v(" "),t("li",[e._v("# 服务器地址和端口，下面的 X.X.X.X 记得更换为你的服务器公网IP，端口请填写服务端配置时的监听端口")]),e._v(" "),t("li",[e._v("Endpoint = X.X.X.X:443")]),e._v(" "),t("li",[e._v("# 因为是客户端，所以这个设置为全部IP段即可")]),e._v(" "),t("li",[e._v("AllowedIPs = 0.0.0.0/0, ::0/0")]),e._v(" "),t("li",[e._v("# 保持连接，如果客户端或服务端是 NAT 网络(比如国内大多数家庭宽带没有公网IP，都是NAT)，那么就需要添加这个参数定时链接服务端(单位：秒)，如果你的服务器和你本地都不是 NAT 网络，那么建议不使用该参数（设置为0，或客户端配置文件中删除这行）")]),e._v(" "),t("li",[e._v("PersistentKeepalive = 25\"|sed '/^#/d;/^\\s*$/d' > client.conf")]),e._v(" "),t("li"),e._v(" "),t("li",[t("strong",[e._v("# 上面加粗的这一大段都是一个代码！请把下面几行全部复制，然后粘贴到 SSH软件中执行，不要一行一行执行！")])])]),e._v(" "),t("p",[e._v("接下来你就可以将这个客户端配置文件 [/etc/wireguard/client.conf] 通过SFTP、HTTP等方式下载到本地了。")]),e._v(" "),t("p",[e._v("不过我更推荐，SSH中打开显示配置文件内容并复制出来后，本地设备新建一个文本文件 [xxx.conf] (名称随意，后缀名需要是 .conf) 并写入其中，提供给 WireGuard 客户端读取使用。")]),e._v(" "),t("ol",[t("li",[e._v("cat /etc/wireguard/client.conf")])]),e._v(" "),t("p",[t("strong",[e._v("五、其他操作")])]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("# 赋予配置文件夹权限")])]),e._v(" "),t("li",[e._v("chmod 777 -R /etc/wireguard")]),e._v(" "),t("li",[t("strong",[e._v("# 打开防火墙转发功能")])]),e._v(" "),t("li",[e._v('echo 1 > /proc/sys/net/ipv4/ip_forwardecho "net.ipv4.ip_forward = 1" >> /etc/sysctl.confsysctl -p')])]),e._v(" "),t("p",[t("strong",[e._v("六、启动与开机启动")])]),e._v(" "),t("p",[e._v("①启动WireGuard")]),e._v(" "),t("ol",[t("li",[e._v("wg-quick up wg0")]),e._v(" "),t("li",[t("strong",[e._v("# 执行命令后，输出示例如下（仅供参考）")])]),e._v(" "),t("li"),e._v(" "),t("li",[e._v("[#] ip link add wg0 type wireguard")]),e._v(" "),t("li",[e._v("[#] wg setconf wg0 /dev/fd/63")]),e._v(" "),t("li",[e._v("[#] ip address add 10.0.0.1/24 dev wg0")]),e._v(" "),t("li",[e._v("[#] ip link set mtu 1420 dev wg0")]),e._v(" "),t("li",[e._v("[#] ip link set wg0 up")]),e._v(" "),t("li",[e._v("[#] resolvconf -a tun.wg0 -m 0 -x")]),e._v(" "),t("li",[e._v("[#] iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE")]),e._v(" "),t("li"),e._v(" "),t("li",[t("strong",[e._v("# 如果此处没有报错：RTNETLINK answers: Operation not supported，且输入内容差不多，那么说明启动成功了！")])])]),e._v(" "),t("p",[e._v("②设置开机启动")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("# 设置开机启动")])]),e._v(" "),t("li",[e._v("systemctl enable wg-quick@wg0")]),e._v(" "),t("li",[t("strong",[e._v("# 取消开机启动")])]),e._v(" "),t("li",[e._v("systemctl disable wg-quick@wg0")])]),e._v(" "),t("p",[e._v("③其他命令补充")]),e._v(" "),t("ol",[t("li",[t("strong",[e._v("# 停止WireGuard")])]),e._v(" "),t("li",[e._v("wg-quick down wg0")]),e._v(" "),t("li",[t("strong",[e._v("# 查询WireGuard状态")])]),e._v(" "),t("li",[e._v("wg")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://www.zkii.net/wp-content/uploads/2020/11/wg-tool.png",alt:"VPS搭建WireGuard服务器图文教程"}})]),e._v(" "),t("p",[e._v("以上内容就是关于VPS搭建WireGuard服务器"),t("a",{attrs:{href:"https://www.zkii.net/tag/%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B/",target:"_blank",rel:"noopener noreferrer"}},[e._v("图文教程"),t("OutboundLink")],1),e._v("，希望可以帮助新手朋友可以快速入门服务器的安装配置。更多详细内容可参考官方白皮书>>"),t("a",{attrs:{href:"https://www.zkii.net/wp-content/themes/begin/inc/go.php?url=https://www.wireguard.com/papers/wireguard.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("点击进入"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("温馨提示：本篇笔记转载的目的在于服务器通信的学习研究，不得用于非法目的。违者后果自负。")]),e._v(" "),t("h2",{attrs:{id:"工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[e._v("#")]),e._v(" 工作原理")]),e._v(" "),t("p",[t("code",[e._v("WireGuard")]),e._v(" 是由 "),t("code",[e._v("Jason Donenfeld")]),e._v(" 等人用 "),t("code",[e._v("C")]),e._v(" 语言编写的一个开源 VPN 协议，被视为下一代 VPN 协议，旨在解决许多困扰 "),t("code",[e._v("IPSec/IKEv2")]),e._v("、"),t("code",[e._v("OpenVPN")]),e._v(" 或 "),t("code",[e._v("L2TP")]),e._v(" 等其他 VPN 协议的问题。它与 "),t("code",[e._v("Tinc")]),e._v(" 和 "),t("code",[e._v("MeshBird")]),e._v(" 等现代 VPN 产品有一些相似之处，即加密技术先进、配置简单。从 2020 年 1 月开始，它已经并入了 Linux 内核的 "),t("code",[e._v("5.6")]),e._v(" 版本，这意味着大多数 Linux 发行版的用户将拥有一个开箱即用的 WireGuard。")]),e._v(" "),t("p",[e._v("无论你是想破墙而出，还是想在服务器之间组网，WireGuard 都不会让你失望，它就是组网的『乐高积木』，就像 ZFS 是构建文件系统的『乐高积木』一样。")]),e._v(" "),t("p",[e._v("WireGuard 与其他 VPN 协议的性能测试对比：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-71bb9f726095f495adc73a00875bd6ba_720w.jpg",alt:"img"}})]),e._v(" "),t("p",[e._v("可以看到 WireGuard 直接碾压其他 VPN 协议。再来说说 "),t("code",[e._v("OpenVPN")]),e._v("，大约有 10 万行代码，而 WireGuard 只有大概 "),t("code",[e._v("4000")]),e._v(" 行代码，代码库相当精简，简直就是件艺术品啊。你再看看 "),t("code",[e._v("OpenVPN")]),e._v(" 的性能，算了不说了。")]),e._v(" "),t("p",[e._v("WireGuard 优点：")]),e._v(" "),t("ul",[t("li",[e._v("配置精简，可直接使用默认值")]),e._v(" "),t("li",[e._v("只需最少的密钥管理工作，每个主机只需要 1 个公钥和 1 个私钥。")]),e._v(" "),t("li",[e._v("就像普通的以太网接口一样，以 Linux 内核模块的形式运行，资源占用小。")]),e._v(" "),t("li",[e._v("能够将部分流量或所有流量通过 VPN 传送到局域网内的任意主机。")]),e._v(" "),t("li",[e._v("能够在网络故障恢复之后自动重连，戳到了其他 VPN 的痛处。")]),e._v(" "),t("li",[e._v("比目前主流的 VPN 协议，连接速度要更快，延迟更低（见上图）。")]),e._v(" "),t("li",[e._v("使用了更先进的加密技术，具有前向加密和抗降级攻击的能力。")]),e._v(" "),t("li",[e._v("支持任何类型的二层网络通信，例如 "),t("code",[e._v("ARP")]),e._v("、"),t("code",[e._v("DHCP")]),e._v(" 和 "),t("code",[e._v("ICMP")]),e._v("，而不仅仅是 TCP/HTTP。")]),e._v(" "),t("li",[e._v("可以运行在主机中为容器之间提供通信，也可以运行在容器中为主机之间提供通信。")])]),e._v(" "),t("p",[e._v("WireGuard 不能做的事：")]),e._v(" "),t("ul",[t("li",[e._v("类似 gossip 协议实现网络自愈。")]),e._v(" "),t("li",[e._v("通过信令服务器突破双重 NAT。")]),e._v(" "),t("li",[e._v("通过中央服务器自动分配和撤销密钥。")]),e._v(" "),t("li",[e._v("发送原始的二层以太网帧。")])]),e._v(" "),t("p",[e._v("当然，你可以使用 WireGuard 作为底层协议来实现自己想要的功能，从而弥补上述这些缺憾。")]),e._v(" "),t("p",[e._v("本系列 WireGuard 教程分为两个部分，第一部分偏理论，第二部分偏实践。本文是第一部分，下面开始正文教程。")]),e._v(" "),t("h2",{attrs:{id:"_1-wireguard-术语"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-wireguard-术语"}},[e._v("#")]),e._v(" 1. WireGuard 术语")]),e._v(" "),t("h3",{attrs:{id:"peer-node-device"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#peer-node-device"}},[e._v("#")]),e._v(" Peer/Node/Device")]),e._v(" "),t("p",[e._v("连接到 VPN 并为自己注册一个 VPN 子网地址（如 192.0.2.3）的主机。还可以通过使用逗号分隔的 CIDR 指定子网范围，为其自身地址以外的 IP 地址选择路由。")]),e._v(" "),t("h3",{attrs:{id:"中继服务器-bounce-server"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中继服务器-bounce-server"}},[e._v("#")]),e._v(" 中继服务器（Bounce Server）")]),e._v(" "),t("p",[e._v("一个公网可达的对等节点，可以将流量中继到 "),t("code",[e._v("NAT")]),e._v(" 后面的其他对等节点。"),t("code",[e._v("Bounce Server")]),e._v(" 并不是特殊的节点，它和其他对等节点一样，唯一的区别是它有公网 IP，并且开启了内核级别的 IP 转发，可以将 VPN 的流量转发到其他客户端。")]),e._v(" "),t("h3",{attrs:{id:"子网-subnet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#子网-subnet"}},[e._v("#")]),e._v(" 子网（Subnet）")]),e._v(" "),t("p",[e._v("一组私有 IP，例如 "),t("code",[e._v("192.0.2.1-255")]),e._v(" 或 "),t("code",[e._v("192.168.1.1/24")]),e._v("，一般在 NAT 后面，例如办公室局域网或家庭网络。")]),e._v(" "),t("h3",{attrs:{id:"cidr-表示法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cidr-表示法"}},[e._v("#")]),e._v(" CIDR 表示法")]),e._v(" "),t("p",[e._v("这是一种使用掩码表示子网大小的方式，这个不用解释了。")]),e._v(" "),t("h3",{attrs:{id:"nat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nat"}},[e._v("#")]),e._v(" NAT")]),e._v(" "),t("p",[e._v("子网的私有 IP 地址由路由器提供，通过公网无法直接访问私有子网设备，需要通过 NAT 做网络地址转换。路由器会跟踪发出的连接，并将响应转发到正确的内部 IP。")]),e._v(" "),t("h3",{attrs:{id:"公开端点-public-endpoint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#公开端点-public-endpoint"}},[e._v("#")]),e._v(" 公开端点（Public Endpoint）")]),e._v(" "),t("p",[e._v("节点的公网 IP 地址:端口，例如 "),t("code",[e._v("123.124.125.126:1234")]),e._v("，或者直接使用域名 "),t("code",[e._v("some.domain.tld:1234")]),e._v("。如果对等节点不在同一子网中，那么节点的公开端点必须使用公网 IP 地址。")]),e._v(" "),t("h3",{attrs:{id:"私钥-private-key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#私钥-private-key"}},[e._v("#")]),e._v(" 私钥（Private key）")]),e._v(" "),t("p",[e._v("单个节点的 WireGuard 私钥，生成方法是："),t("code",[e._v("wg genkey > example.key")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"公钥-public-key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#公钥-public-key"}},[e._v("#")]),e._v(" 公钥（Public key）")]),e._v(" "),t("p",[e._v("单个节点的 WireGuard 公钥，生成方式为："),t("code",[e._v("wg pubkey < example.key > example.key.pub")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"dns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dns"}},[e._v("#")]),e._v(" DNS")]),e._v(" "),t("p",[e._v("域名服务器，用于将域名解析为 VPN 客户端的 IP，不让 DNS请求泄漏到 VPN 之外。")]),e._v(" "),t("h2",{attrs:{id:"_2-wireguard-工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-wireguard-工作原理"}},[e._v("#")]),e._v(" 2. WireGuard 工作原理")]),e._v(" "),t("h3",{attrs:{id:"中继服务器工作原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中继服务器工作原理"}},[e._v("#")]),e._v(" 中继服务器工作原理")]),e._v(" "),t("p",[e._v("中继服务器（Bounce Server）和普通的对等节点一样，它能够在 "),t("code",[e._v("NAT")]),e._v(" 后面的 VPN 客户端之间充当中继服务器，可以将收到的任何 VPN 子网流量转发到正确的对等节点。事实上 WireGuard 并不关心流量是如何转发的，这个由系统内核和 "),t("code",[e._v("iptables")]),e._v(" 规则处理。")]),e._v(" "),t("p",[e._v("如果所有的对等节点都是公网可达的，则不需要考虑中继服务器，只有当有对等节点位于 NAT 后面时才需要考虑。")]),e._v(" "),t("p",[t("strong",[e._v("在 WireGuard 里，客户端和服务端基本是平等的，差别只是谁主动连接谁而已")]),e._v("。双方都会监听一个 UDP 端口，谁主动连接，谁就是客户端。主动连接的客户端需要指定对端的公网地址和端口，被动连接的服务端不需要指定其他对等节点的地址和端口。如果客户端和服务端都位于 NAT 后面，需要加一个中继服务器，客户端和服务端都指定中继服务器作为对等节点，它们的通信流量会先进入中继服务器，然后再转发到对端。")]),e._v(" "),t("p",[e._v("WireGuard 是支持漫游的，也就是说，双方不管谁的地址变动了，WireGuard 在看到对方从新地址说话的时候，就会记住它的新地址（跟 mosh 一样，不过是双向的）。所以双方要是一直保持在线，并且通信足够频繁的话（比如配置 "),t("code",[e._v("persistent-keepalive")]),e._v("），两边的 IP 都不固定也不影响的。")]),e._v(" "),t("h3",{attrs:{id:"wireguard-如何路由流量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#wireguard-如何路由流量"}},[e._v("#")]),e._v(" Wireguard 如何路由流量")]),e._v(" "),t("p",[e._v("利用 WireGuard 可以组建非常复杂的网络拓扑，这里主要介绍几个典型的拓扑：")]),e._v(" "),t("p",[e._v("① 端到端直接连接")]),e._v(" "),t("h5",{attrs:{id:"这是最简单的拓扑-所有的节点要么在同一个局域网-要么直接通过公网访问-这样-wireguard-可以直接连接到对端-不需要中继跳转。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#这是最简单的拓扑-所有的节点要么在同一个局域网-要么直接通过公网访问-这样-wireguard-可以直接连接到对端-不需要中继跳转。"}},[e._v("#")]),e._v(" 这是最简单的拓扑，所有的节点要么在同一个局域网，要么直接通过公网访问，这样 "),t("code",[e._v("WireGuard")]),e._v(" 可以直接连接到对端，不需要中继跳转。")]),e._v(" "),t("p",[e._v("② 一端位于 NAT 后面，另一端直接通过公网暴露")]),e._v(" "),t("p",[e._v("这种情况下，最简单的方案是：通过公网暴露的一端作为服务端，另一端指定服务端的公网地址和端口，然后通过 "),t("code",[e._v("persistent-keepalive")]),e._v(" 选项维持长连接，让 NAT 记得对应的映射关系。")]),e._v(" "),t("p",[e._v("③ 两端都位于 NAT 后面，通过中继服务器连接")]),e._v(" "),t("p",[e._v("大多数情况下，当通信双方都在 NAT 后面的时候，NAT 会做源端口随机化处理，直接连接可能比较困难。可以加一个中继服务器，通信双方都将中继服务器作为对端，然后维持长连接，流量就会通过中继服务器进行转发。")]),e._v(" "),t("p",[e._v("④ 两端都位于 NAT 后面，通过 UDP NAT 打洞")]),e._v(" "),t("p",[e._v("上面也提到了，当通信双方都在 NAT 后面的时候，直接连接不太现实，因为大多数 NAT 路由器对源端口的随机化相当严格，不可能提前为双方协调一个固定开放的端口。必须使用一个信令服务器（"),t("code",[e._v("STUN")]),e._v("），它会在中间沟通分配给对方哪些随机源端口。通信双方都会和公共信令服务器进行初始连接，然后它记录下随机的源端口，并将其返回给客户端。这其实就是现代 P2P 网络中 "),t("code",[e._v("WebRTC")]),e._v(" 的工作原理。有时候，即使有了信令服务器和两端已知的源端口，也无法直接连接，因为 NAT 路由器严格规定只接受来自原始目的地址（信令服务器）的流量，会要求新开一个随机源端口来接受来自其他 IP 的流量（比如其他客户端试图使用原来的通信源端口）。运营商级别的 NAT 就是这么干的，比如蜂窝网络和一些企业网络，它们专门用这种方法来防止打洞连接。更多细节请参考下一部分的 NAT 到 NAT 连接实践的章节。")]),e._v(" "),t("p",[e._v("如果某一端同时连接了多个对端，当它想访问某个 IP 时，如果有具体的路由可用，则优先使用具体的路由，否则就会将流量转发到中继服务器，然后中继服务器再根据系统路由表进行转发。你可以通过测量 ping 的时间来计算每一跳的长度，并通过检查对端的输出（"),t("code",[e._v("wg show wg0")]),e._v("）来找到 WireGuard 对一个给定地址的路由方式。")]),e._v(" "),t("h3",{attrs:{id:"wireguard-报文格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#wireguard-报文格式"}},[e._v("#")]),e._v(" WireGuard 报文格式")]),e._v(" "),t("p",[e._v("WireGuard 使用加密的 UDP 报文来封装所有的数据，UDP 不保证数据包一定能送达，也不保证按顺序到达，但隧道内的 TCP 连接可以保证数据有效交付。WireGuard 的报文格式如下图所示：")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-ade31b0581afd15b4ac6a3dbcf3faa4b_1440w.jpg",alt:"img"}})]),e._v(" "),t("p",[e._v("关于 WireGuard 报文的更多信息可以参考下面几篇文档：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//www.wireshark.org/docs/dfref/w/wg.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("wireshark.org/docs/dfref/w/wg.html"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//github.com/Lekensteyn/wireguard-dissector",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lekensteyn/wireguard-dissector"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//nbsoftsolutions.com/blog/viewing-wireguard-traffic-with-tcpdump",target:"_blank",rel:"noopener noreferrer"}},[e._v("nbsoftsolutions.com/blog/viewing-wireguard-traffic-with-tcpdump"),t("OutboundLink")],1)])]),e._v(" "),t("h3",{attrs:{id:"wireguard-的性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#wireguard-的性能"}},[e._v("#")]),e._v(" WireGuard 的性能")]),e._v(" "),t("p",[e._v("WireGuard 声称其性能比大多数 VPN 协议更好，但这个事情有很多争议，比如某些加密方式支持硬件层面的加速。")]),e._v(" "),t("p",[e._v("WireGuard 直接在内核层面处理路由，直接使用系统内核的加密模块来加密数据，和 Linux 原本内置的密码子系统共存，原有的子系统能通过 "),t("code",[e._v("API")]),e._v(" 使用 WireGuard 的 "),t("code",[e._v("Zinc")]),e._v(" 密码库。WireGuard 使用 UDP 协议传输数据，在不使用的情况下默认不会传输任何 UDP 数据包，所以比常规 VPN 省电很多，可以像 55 一样一直挂着使用，速度相比其他 VPN 也是压倒性优势。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-bdb0a3376aa899b5daad469b5f8c90bf_1440w.jpg",alt:"img"}})]),e._v(" "),t("p",[e._v("关于性能比较的更多信息可以参考下面几篇文档：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//www.wireguard.com/performance/",target:"_blank",rel:"noopener noreferrer"}},[e._v("wireguard.com/performance"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//www.reddit.com/r/linux/comments/9bnowo/wireguard_benchmark_between_two_servers_with_10/",target:"_blank",rel:"noopener noreferrer"}},[e._v("reddit.com/r/linux/comments/9bnowo/wireguard_benchmark_between_two_servers_with_10"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//restoreprivacy.com/open%E5%A8%81%E5%B1%81%E6%81%A9-ipsec-wireguard-l2tp-ikev2-protocols/",target:"_blank",rel:"noopener noreferrer"}},[e._v("restoreprivacy.com/openVPN-ipsec-wireguard-l2tp-ikev2-protocols"),t("OutboundLink")],1)])]),e._v(" "),t("h3",{attrs:{id:"wireguard-安全模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#wireguard-安全模型"}},[e._v("#")]),e._v(" WireGuard 安全模型")]),e._v(" "),t("p",[e._v("WireGuard 使用以下加密技术来保障数据的安全：")]),e._v(" "),t("ul",[t("li",[e._v("使用 "),t("code",[e._v("ChaCha20")]),e._v(" 进行对称加密，使用 "),t("code",[e._v("Poly1305")]),e._v(" 进行数据验证。")]),e._v(" "),t("li",[e._v("利用 "),t("code",[e._v("Curve25519")]),e._v(" 进行密钥交换。")]),e._v(" "),t("li",[e._v("使用 "),t("code",[e._v("BLAKE2")]),e._v(" 作为哈希函数。")]),e._v(" "),t("li",[e._v("使用 "),t("code",[e._v("HKDF")]),e._v(" 进行解密。")])]),e._v(" "),t("p",[e._v("WireGuard 的加密技术本质上是 "),t("code",[e._v("Trevor Perrin")]),e._v(" 的 "),t("code",[e._v("Noise")]),e._v(" 框架的实例化，它简单高效，其他的 VPN 都是通过一系列协商、握手和复杂的状态机来保障安全性。WireGuard 就相当于 VPN 协议中的 "),t("code",[e._v("qmail")]),e._v("，代码量比其他 VPN 协议少了好几个数量级。")]),e._v(" "),t("p",[e._v("关于 WireGuard 加密的更多资料请参考下方链接：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//www.wireguard.com/papers/wireguard.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("wireguard.com/papers/wireguard.pdf"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//eprint.iacr.org/2018/080.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("eprint.iacr.org/2018/080.pdf"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//courses.csail.mit.edu/6.857/2018/project/He-Xu-Xu-WireGuard.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("courses.csail.mit.edu/6.857/2018/project/He-Xu-Xu-WireGuard.pdf"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//www.wireguard.com/talks/blackhat2018-slides.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("wireguard.com/talks/blackhat2018-slides.pdf"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//arstechnica.com/gadgets/2018/08/wireguard-%E5%A8%81%E5%B1%81%E6%81%A9-review-fast-connections-amaze-but-windows-support-needs-to-happen/",target:"_blank",rel:"noopener noreferrer"}},[e._v("arstechnica.com/gadgets/2018/08/wireguard-VPN-review-fast-connections-amaze-but-windows-support-needs-to-happen"),t("OutboundLink")],1)])]),e._v(" "),t("h3",{attrs:{id:"wireguard-密钥管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#wireguard-密钥管理"}},[e._v("#")]),e._v(" WireGuard 密钥管理")]),e._v(" "),t("p",[e._v("WireGuard 通过为每个对等节点提供简单的公钥和私钥来实现双向认证，每个对等节点在设置阶段生成密钥，且只在对等节点之间共享密钥。每个节点除了公钥和私钥，不再需要其他证书或预共享密钥。")]),e._v(" "),t("p",[e._v("在更大规模的部署中，可以使用 "),t("code",[e._v("Ansible")]),e._v(" 或 "),t("code",[e._v("Kubernetes Secrets")]),e._v(" 等单独的服务来处理密钥的生成、分发和销毁。")]),e._v(" "),t("p",[e._v("下面是一些有助于密钥分发和部署的服务：")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//pypi.org/project/wireguard-p2p/",target:"_blank",rel:"noopener noreferrer"}},[e._v("pypi.org/project/wireguard-p2p"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//github.com/trailofbits/algo",target:"_blank",rel:"noopener noreferrer"}},[e._v("trailofbits/algo"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//github.com/StreisandEffect/streisand",target:"_blank",rel:"noopener noreferrer"}},[e._v("StreisandEffect/streisand"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//github.com/its0x08/wg-install",target:"_blank",rel:"noopener noreferrer"}},[e._v("its0x08/wg-install"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//github.com/brittson/wireguard_config_maker",target:"_blank",rel:"noopener noreferrer"}},[e._v("brittson/wireguard_config_maker"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//www.wireguardconfig.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("wireguardconfig.com"),t("OutboundLink")],1)])]),e._v(" "),t("p",[e._v("如果你不想在 "),t("code",[e._v("wg0.conf")]),e._v(" 配置文件中直接硬编码，可以从文件或命令中读取密钥，这使得通过第三方服务管理密钥变得更加容易：")]),e._v(" "),t("div",{staticClass:"language-text line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[Interface]\n...\nPostUp = wg set %i private-key /etc/wireguard/wg0.key &lt;(cat /some/path/%i/privkey)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("从技术上讲，多个服务端之间可以共享相同的私钥，只要客户端不使用相同的密钥同时连接到两个服务器。但有时客户端会需要同时连接多台服务器，例如，你可以使用 "),t("code",[e._v("DNS")]),e._v(" 轮询来均衡两台服务器之间的连接，这两台服务器配置相同。大多数情况下，每个对等节点都应该使用独立的的公钥和私钥，这样每个对等节点都不能读取到对方的流量，保障了安全性。")]),e._v(" "),t("p",[e._v("理论部分就到这里，下篇文章将会手把手教你如何从零开始配置 WireGuard，这里会涉及到很多高级的配置方法，例如动态 IP、NAT 到 NAT、IPv6 等等。")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("Kubernetes 1.18.2 1.17.5 1.16.9 1.15.12离线安装包发布地址"),t("a",{attrs:{href:"https://link.zhihu.com/?target=http%3A//store.lameleg.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://store.lameleg.com"),t("OutboundLink")],1),e._v(" ，欢迎体验。 使用了最新的sealos v3.3.6版本。 作了主机名解析配置优化，lvscare 挂载/lib/module解决开机启动ipvs加载问题， 修复lvscare社区netlink与3.10内核不兼容问题,sealos生成百年证书等特性。更多特性 "),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//github.com/fanux/sealos",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/fanux/sealos"),t("OutboundLink")],1),e._v(" 。欢迎扫描下方的二维码加入钉钉群 ，钉钉群已经集成sealos的机器人实时可以看到sealos的动态。")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//qr.dingtalk.com/action/joingroup%3Fcode%3Dv1%2Ck1%2CzVBIDO0WoCJb%2BcPDqxXHb67W9HeuqAIMnpKVoboD8tA%3D",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://qr.dingtalk.com/action/joingroup?code=v1,k1,zVBIDO0WoCJb+cPDqxXHb67W9HeuqAIMnpKVoboD8tA="),t("OutboundLink")],1),e._v(" (二维码自动识别)")]),e._v(" "),t("h2",{attrs:{id:"附录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#附录"}},[e._v("#")]),e._v(" 附录")]),e._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 启动wireguard")]),e._v("\n$ wg-quick up wg0\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 关闭wireguard")]),e._v("\n$ wg-quick down wg0\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])])])}),[],!1,null,null,null);r.default=_.exports}}]);